traindata = prostate[prostate$train==TRUE,]
testdata = prostate[prostate$train==FALSE,]
dim(traindata)
dim(testdata)
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=traindata)
prediction <- predict(model, newdata = testdata)
sum((testdata$lpsa - prediction)^2)/30
dim(testdata)
dim(traindata)
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=traindata)
prediction <- predict(model, newdata = testdata)
sum((testdata$lpsa - prediction)^2)/30
summary(model)
mean(model$residuals^2)
#TEst Error
mean((testdata$lpsa - prediction)) ^ 2)
#TEst Error
mean((testdata$lpsa - prediction) ^ 2)
sum((testdata$lpsa - prediction)^2)/30
sum((testdata$lpsa - prediction)^2)/30
testdata$lpsa
prediction
(testdata$lpsa - prediction)
(testdata$lpsa - prediction)^2
((testdata$lpsa - prediction)^2)
mean((testdata$lpsa - prediction)^2)
install.packages("e1071")
library(e1071)
dim(spam)
dim(spamdata)
library(e1071)
spam = read.table(file="https://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.data")
names(spam)[58] = "Y"
spam$Y = as.factor(spam$Y)
testID = c(1:100, 1901:1960)
spam.test=spam[testID, ];
spam.train=spam[-testID, ];
testID
## Linear SVM
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=1)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
table(spam.train$Y, svmfit$fitted)
spam.train
dim(spam.train)
table(spam.train$Y, svmfit$fitted)
(2616+1534)
(2616+1534)/4441
1-((2616+1534)/4441)
table(spam.train$Y, svmfit$fitted)
(112+179)/4441
dim(spam.train)
spam.test
dim(spam.test)
table(spam.test$Y, svmpred)
(1+12)/160
1 - ((58+88)/169)
1 - ((58+88)/160)
(2+12)/160
table(spam.test$Y, svmpred)
table(spam.train$Y, svmfit$fitted)
dim(spam.train)
dim(spam.train)[1]
#Training Error
((112+179)/dim(spam.train)[1])
table(spam.test$Y, svmpred)
#Test Error
((12+2)/dim(spam.test)[1])
## Linear SVM
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
#Training Error
((110+178)/dim(spam.train)[1])
table(spam.test$Y, svmpred)
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
#Test Error
((11+3)/dim(spam.test)[1])
## Linear SVM
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
#Training Error
((112+179)/dim(spam.train)[1])
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
#Test Error
((11+3)/dim(spam.test)[1])
## Gaussian kernel SVM
svmfit=svm(Y ~., data=spam.train, cost=1)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
#Training Error
((147+85)/dim(spam.train)[1])
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
#Test Error
((10+4)/dim(spam.test)[1])
## Gaussian kernel SVM
svmfit=svm(Y ~., data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
#Training Error
((99+47)/dim(spam.train)[1])
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
#Test Error
((11+4)/dim(spam.test)[1])
## Gaussian kernel SVM
svmfit=svm(Y ~., data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
## Gaussian kernel SVM
svmfit=svm(Y ~., data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
#Training Error
((63+27)/dim(spam.train)[1])
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
#Test Error
((14+3)/dim(spam.test)[1])
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
dim(spam.train)[1])
dim(spam.train)[1]
#Training Error
((179+112)/dim(spam.train)[1])
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
dim(spam.train)[1]
#Training Error
((179+112)/dim(spam.train)[1])
sum((testdata$lpsa - prediction)^2)/30
prostate = read.table("https://web.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data",
header = TRUE)
names(prostate)
traindata = prostate[prostate$train==TRUE,]
testdata = prostate[prostate$train==FALSE,]
dim(traindata)
dim(testdata)
model = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=traindata)
prediction <- predict(model, newdata = testdata)
sum((testdata$lpsa - prediction)^2)/30
#TEst Error
mean((testdata$lpsa - prediction) ^ 2)
#TEst Error
sum((testdata$lpsa - prediction) ^ 2)
testdata$lpsa
lentgh(testdata$lpsa)
dim(testdata$lpsa)
length(testdata$lpsa)
prediction
length(prediction)
#TEst Error
sum((testdata$lpsa - prediction) ^ 2)
## Linear SVM
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=1)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
table(spam.train$Y, svmfit$fitted)
#Training Error (Cost = 1)
179 + 112
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
## Linear SVM
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
#Training Error (Cost = 10)
178 + 110
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
#Training Error (Cost = 10)
11 + 3
## Linear SVM
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
## Linear SVM
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
#Training Error (Cost = 50)
179 + 112
#Training Error (Cost = 50)
11 + 3
## Gaussian kernel SVM
svmfit=svm(Y ~., data=spam.train, cost=1)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
#Training Error (Cost = 1)
147 + 85
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
#Training Error (Cost = 1)
10 + 4
## Gaussian kernel SVM
svmfit=svm(Y ~., data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
#Training Error (Cost = 10)
99 + 47
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
#Training Error (Cost = 10)
11 + 4
## Gaussian kernel SVM
svmfit=svm(Y ~., data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
#Training Error (Cost = 50)
63 + 27
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
#Training Error (Cost = 50)
14 + 3
##------------------------------------------------
## Linear SVM
##------------------------------------------------
#Training Error (Cost = 1)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=1)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
179 + 112
#Training Error (Cost = 10)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
178 + 110
#Training Error (Cost = 50)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
179 + 112
#Training Error (Cost = 1)
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
##------------------------------------------------
## Linear SVM
##------------------------------------------------
#Training Error (Cost = 1)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=1)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
179 + 112
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
12+2
#Training Error (Cost = 10)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
178 + 110
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
11 + 3
#Training Error (Cost = 50)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
179 + 112
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
11 + 3
##------------------------------------------------
#Gaussian kernel SVM
##------------------------------------------------
#Training Error (Cost = 1)
svmfit=svm(Y ~., data=spam.train, cost=1)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
147 + 85
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
10 + 4
##------------------------------------------------
## Linear SVM
##------------------------------------------------
#Training Error (Cost = 1)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=1)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
179 + 112
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
12+2
#Training Error (Cost = 10)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
178 + 110
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
11 + 3
#Training Error (Cost = 50)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
179 + 112
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
11 + 3
##------------------------------------------------
#Gaussian kernel SVM
##------------------------------------------------
#Training Error (Cost = 1)
svmfit=svm(Y ~., data=spam.train, cost=1)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
147 + 85
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
10 + 4
#Training Error (Cost = 10)
svmfit=svm(Y ~., data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
99 + 47
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
11 + 4
#Training Error (Cost = 50)
svmfit=svm(Y ~., data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
63 + 27
#Training Error (Cost = 50)
svmfit=svm(Y ~., data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
63 + 27
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
14 + 3
##------------------------------------------------
## Linear SVM
##------------------------------------------------
#Training Error (Cost = 1)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=1)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
179 + 112
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
12+2
#Training Error (Cost = 10)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
178 + 110
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
11 + 3
#Training Error (Cost = 50)
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
179 + 112
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
11 + 3
##------------------------------------------------
#Gaussian kernel SVM
##------------------------------------------------
#Training Error (Cost = 1)
svmfit=svm(Y ~., data=spam.train, cost=1)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
147 + 85
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
10 + 4
#Training Error (Cost = 10)
svmfit=svm(Y ~., data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
99 + 47
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
11 + 4
#Training Error (Cost = 50)
svmfit=svm(Y ~., data=spam.train, cost=50)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
63 + 27
svmpred=predict(svmfit, newdata=spam.test)
table(spam.test$Y, svmpred)
14 + 3
#------------------------------------------------------------------------------------------------------------------------
# glmnet (One more time)
#------------------------------------------------------------------------------------------------------------------------
myLasso2 <- glmnet(X_train_Only,y_train_transformed,alpha=1,family = 'binomial')
coef(myLasso2,s=0.004)
glmnet.pred1 = rep("No",1000)
glmnet.pred1[glmnet.pred1 > 0.25] = "Yes"
#Confusion Matrix
table (glmnet.pred1,y_test)
roc(y_test_transformed, glmnet.probs1) # 0.7501
predict(glmnet_model1, s=0.004,newx=x_test)
glmnet.pred1
myLasso2 <- glmnet(X_train_Only,y_train,alpha=1,family = 'binomial')
coef(myLasso2,s=0.004)
myLasso2 <- glmnet(X_train_Only,y_train_transformed,alpha=1,family = 'binomial')
coef(myLasso2,s=0.004)
glmnet.pred1 = rep("No",1000)
glmnet.pred1[glmnet.pred1 > 0.25] = "Yes"
table (glmnet.pred1,y_test)
#------------------------------------------------------------------------------------------------------------------------
# glmnet (One more time) - **** REVISED *****
#------------------------------------------------------------------------------------------------------------------------
X_test = Caravan[0:1000,0:85]
y_test = Caravan[0:1000,86]
X_train = Caravan[1001:dim(Caravan)[1],0:85]
y_train = X_train[,86]
myLasso2 <- glmnet(X_train,y_train,alpha=1,family = 'binomial')
coef(myLasso2,s=0.004)
glmnet.pred = rep("No",1000)
glmnet.pred[glmnet.pred > 0.25] = "Yes"
table (glmnet.pred,y_test)
myLasso2 <- glmnet(X_train,y_train,alpha=1,family = 'binomial',standardize = True,intercept = TRUE)
myLasso2 <- glmnet(X_train,y_train,alpha=1,family = 'binomial',standardize = TRUE,intercept = TRUE)
coef(myLasso2,s=0.004)
glmnet.pred = rep("No",1000)
glmnet.pred[glmnet.pred > 0.25] = "Yes"
table (glmnet.pred,y_test)
myLasso2 <- glmnet(X_train,y_train,alpha=1,family = 'binomial',standardize = TRUE,intercept = TRUE)
coef(myLasso2,s=0.004)
glmnet.pred = rep("No",1000)
glmnet.pred[glmnet.pred > 0.25] = "Yes"
table (glmnet.pred,y_test)
glmnet.probs1 = predict(myLasso2, s=0.004,newx=x_test)
glmnet.probs1
glmnet.probs1 = predict(myLasso2, s=0.004,newx=X_test)
x
x_test
X_test
glmnet.probs1 = predict(myLasso2, s=0.004,newx=X_test)
glmnet.probs1 = predict(myLasso2, s=0.004,newx=X_test,type="response")
glmnet.probs1 = predict(myLasso2, s=0.004,newx=x_test,type="response")
glmnet.probs1
glmnet.pred = rep("No",1000)
glmnet.pred[glmnet.probs1 > 0.25] = "Yes"
table (glmnet.pred,y_test)
roc(y_test_transformed, glmnet.probs1) # 0.7501
table (glmnet.pred,y_test)
glmnet.probs1 = predict(myLasso2, s=0.004,newx=x_test)#,type="response")
glmnet.probs1
glmnet.pred = rep("No",1000)
glmnet.pred[glmnet.probs1 > 0.25] = "Yes"
table (glmnet.pred,y_test)
#------------------------------------------------------------------------------------------------------------------------
# glmnet
#------------------------------------------------------------------------------------------------------------------------
x = model.matrix(Purchase~.,X_train)[,-1]
y = X_train$Purchase
#------------------------------------------------------------------------------------------------------------------------
# glmnet
#------------------------------------------------------------------------------------------------------------------------
x = model.matrix(Purchase~.,X_train)[,-1]
X_train
#------------------------------------------------------------------------------------------------------------------------
# glmnet
#------------------------------------------------------------------------------------------------------------------------
X_train = Caravan[1001:dim(Caravan)[1],]
x = model.matrix(Purchase~.,X_train)[,-1]
y = X_train$Purchase
x_test = model.matrix(Purchase~.,X_test1)[,-1]
y_transformed = ifelse(y=="Yes",1,0)
glmnet_model = glmnet(x,y_transformed,standardize = TRUE,intercept=TRUE )
summary(glmnet_model)
coef(glmnet_model)
dim(coef(glmnet_model))
glmnet.probs = predict(glmnet_model, s=0.004,newx=x_test,type="response")
glmnet.pred = rep("No",1000)
glmnet.pred[glmnet.pred > 0.25] = "Yes"
#Confusion Matrix
table (glmnet.pred,y_test)
myLasso2 <- glmnet(X_train,y_train,alpha=1,family = 'binomial',standardize = TRUE,intercept = TRUE)
glmnet.probs1 = predict(myLasso2, s=0.004,newx=x_test)#,type="response")
glmnet.probs1
glmnet.pred = rep("No",1000)
glmnet.pred[glmnet.probs1 > 0.25] = "Yes"
table (glmnet.pred,y_test)
roc(y_test_transformed, glmnet.probs1) # 0.7501
coef(myLasso2,s=0.004)
myLasso2 <- glmnet(X_train,y_train,alpha=1,family = 'binomial',standardize = TRUE,intercept = TRUE)
coef(myLasso2,s=0.004)
glmnet.probs1 = predict(myLasso2, s=0.004,newx=x_test,type="response")
glmnet.probs1 = predict(myLasso2, s=0.004,newx=x_test,type="response")
glmnet.probs1 = predict(myLasso2, s=0.004,newx=x_test,type="response")
x_test
dim(x_test)
dim(X_train)
X_train = Caravan[1001:dim(Caravan)[1],0:85]
dim(X_train)
glmnet.probs1 = predict(myLasso2, s=0.004,newx=x_test,type="response")
myLasso2 <- glmnet(X_train,y_train,alpha=1,family = 'binomial',standardize = TRUE,intercept = TRUE)
coef(myLasso2,s=0.004)
glmnet.probs1
glmnet.pred = rep("No",1000)
glmnet.pred[glmnet.probs1 > 0.25] = "Yes"
table (glmnet.pred,y_test)
roc(y_test_transformed, glmnet.probs1) # 0.7501
