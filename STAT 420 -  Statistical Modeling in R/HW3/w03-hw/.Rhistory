beta_0 = 5
beta_1 = 2
sigma_2 = 9
sigma = sqrt(sigma_2)
birthday = 19770411
set.seed(birthday)
n = 25
x = seq(0, 2.5, length = n)
sim_data = function(x,beta0,beta1,n){
epsilon = rnorm(n,mean=0,sd=sigma)
y = beta0 + beta1 * x + epsilon
data.frame(predictor = x, response = y)
}
loop_times = 2500
se_sim = rep(0,loop_times)
beta_1_hat = rep(0,loop_times)
for(i in 1:loop_times){
epsilon = rnorm(n,mean=0,sd=sigma)
y = beta_0 + beta_1 * x + epsilon
data = sim_data(x,beta_0,beta_1,n)
data_model = lm(response~predictor,data=data)
se = sqrt((sum((predict(data_model) - y)^2))/(length(y) - 2))
print(se,summary(data_model)$sigma)
beta_1_hat[i] = summary(data_model)$coefficient[2,1]
se_sim[i] = se
}
Sxx = sum((x - mean(x))^2)
lower_95 = min(beta_1_hat - se_sim/sqrt(Sxx))
upper_95 = max(beta_1_hat + se_sim/sqrt(Sxx))
se
summary(data_model)$sigma
model
sqrt((sum((predict(data_model) - y)^2))/(length(y) - 2))
data_model = lm(response~predictor,data=data)
sqrt((sum((predict(data_model) - y)^2))/(length(y) - 2))
summary(data_model)
summary(data_model)$sigma
predict(model)
beta_0 = 5
beta_1 = 2
sigma_2 = 9
beta_0 + beta_1 * x
x
predict(data_model)
epsilon
beta_0 + beta_1 * predictor
printn(x)
print(x)
epsilon = rnorm(n,mean=0,sd=sigma)
epsilon
y = beta_0 + beta_1 * x + epsilon
y
data = sim_data(x,beta_0,beta_1,n)
data$response
beta_0 = 5
beta_1 = 2
sigma_2 = 9
sigma = sqrt(sigma_2)
birthday = 19770411
set.seed(birthday)
n = 25
x = seq(0, 2.5, length = n)
sim_data = function(x,beta0,beta1,n){
epsilon = rnorm(n,mean=0,sd=sigma)
y = beta0 + beta1 * x + epsilon
data.frame(predictor = x, response = y)
}
loop_times = 25
se_sim = rep(0,loop_times)
beta_1_hat = rep(0,loop_times)
for(i in 1:loop_times){
epsilon = rnorm(n,mean=0,sd=sigma)
#y = beta_0 + beta_1 * x + epsilon
data = sim_data(x,beta_0,beta_1,n)
data_model = lm(response~predictor,data=data)
se = sqrt((sum((predict(data_model) - data$response)^2))/(length(data$response) - 2))
print(se,summary(data_model)$sigma)
beta_1_hat[i] = summary(data_model)$coefficient[2,1]
se_sim[i] = se
}
Sxx = sum((x - mean(x))^2)
lower_95 = min(beta_1_hat - se_sim/sqrt(Sxx))
upper_95 = max(beta_1_hat + se_sim/sqrt(Sxx))
se
summary(data_model)$sigma
beta_0 = 5
beta_1 = 2
sigma_2 = 9
sigma = sqrt(sigma_2)
birthday = 19770411
set.seed(birthday)
n = 25
x = seq(0, 2.5, length = n)
sim_data = function(x,beta0,beta1,n){
epsilon = rnorm(n,mean=0,sd=sigma)
y = beta0 + beta1 * x + epsilon
data.frame(predictor = x, response = y)
}
loop_times = 2
se_sim = rep(0,loop_times)
beta_1_hat = rep(0,loop_times)
for(i in 1:loop_times){
epsilon = rnorm(n,mean=0,sd=sigma)
data = sim_data(x,beta_0,beta_1,n)
data_model = lm(response~predictor,data=data)
se = sqrt((sum((predict(data_model) - data$response)^2))/(length(data$response) - 2))
print(se,summary(data_model)$sigma)
beta_1_hat[i] = summary(data_model)$coefficient[2,1]
se_sim[i] = se
}
Sxx = sum((x - mean(x))^2)
lower_95 = min(beta_1_hat - se_sim/sqrt(Sxx))
upper_95 = max(beta_1_hat + se_sim/sqrt(Sxx))
beta_0 = 5
beta_1 = 2
sigma_2 = 9
sigma = sqrt(sigma_2)
birthday = 19770411
set.seed(birthday)
n = 25
x = seq(0, 2.5, length = n)
sim_data = function(x,beta0,beta1,n){
epsilon = rnorm(n,mean=0,sd=sigma)
y = beta0 + beta1 * x + epsilon
data.frame(predictor = x, response = y)
}
loop_times = 2
se_sim = rep(0,loop_times)
beta_1_hat = rep(0,loop_times)
for(i in 1:loop_times){
epsilon = rnorm(n,mean=0,sd=sigma)
data = sim_data(x,beta_0,beta_1,n)
data_model = lm(response~predictor,data=data)
se = sqrt((sum((predict(data_model) - data$response)^2))/(length(data$response) - 2))
print(se)
print(summary(data_model)$sigma)
beta_1_hat[i] = summary(data_model)$coefficient[2,1]
se_sim[i] = se
}
Sxx = sum((x - mean(x))^2)
lower_95 = min(beta_1_hat - se_sim/sqrt(Sxx))
upper_95 = max(beta_1_hat + se_sim/sqrt(Sxx))
beta_0 = 5
beta_1 = 2
sigma_2 = 9
sigma = sqrt(sigma_2)
birthday = 19770411
set.seed(birthday)
n = 25
x = seq(0, 2.5, length = n)
sim_data = function(x,beta0,beta1,n){
epsilon = rnorm(n,mean=0,sd=sigma)
y = beta0 + beta1 * x + epsilon
data.frame(predictor = x, response = y)
}
loop_times = 2500
se_sim = rep(0,loop_times)
beta_1_hat = rep(0,loop_times)
for(i in 1:loop_times){
epsilon = rnorm(n,mean=0,sd=sigma)
data = sim_data(x,beta_0,beta_1,n)
data_model = lm(response~predictor,data=data)
se = sqrt((sum((predict(data_model) - data$response)^2))/(length(data$response) - 2))
print(se)
print(summary(data_model)$sigma)
beta_1_hat[i] = summary(data_model)$coefficient[2,1]
se_sim[i] = se
}
Sxx = sum((x - mean(x))^2)
lower_95 = min(beta_1_hat - se_sim/sqrt(Sxx))
upper_95 = max(beta_1_hat + se_sim/sqrt(Sxx))
lower_95 = min(beta_1_hat - se_sim/sqrt(Sxx))
upper_95 = max(beta_1_hat + se_sim/sqrt(Sxx))
lower_95
upper_95
pt(beta_1 = 2)
beta_1 = 2
beta_1
pt(beta_1 = 2,df=nrow(25))
pt(beta_1 = 2,df=nrow(25)-2)
pt(beta_1 = 2,df=25-2)
beta_1
?pt
pt(2,23)
hist(beta_1_hat)
?pnorm
qt(2,23)
qt(1,23)
qt(0.2,23)
alpha = (1-0.95)
alpha
alpha/2
alpha_2 = alpha/2
alpha_2
crit = qt(alpha_2,df = nrow(data) - 2)
crit
lower_95 = min(beta_1_hat - crit * se_sim/sqrt(Sxx))
upper_95 = max(beta_1_hat + crit * se_sim/sqrt(Sxx))
lower_95
upper_95
beta_1
pt(2,df=23)
alpha = (1-0.99)
alpha_2 = alpha/2
crit_99 = qt(alpha_2,df = nrow(data) - 2)
crit_99
crit_95
alpha = (1-0.95)
alpha_2 = alpha/2
crit_95 = qt(alpha_2,df = nrow(data) - 2)
crit_95
cat_model
newcat_1 = data.frame(Bwt = 4.0)
predict(cat_model,newdata=newcat_1)
predict(cat_model,newdata=c(newcat_1))
predict(cat_model,newdata=newcat_1)
predict(cat_model,newdata=newcat_1,interval="confidence",level=0.95)
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.95)
predict(cat_model,newdata=newcat_1)
calc_pred_int = function (model, newdata, level = c(0.95)) {
est = predict(model,newdata=newdata)
est
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
predict(model)
names(model)
calc_pred_int = function (model, newdata, level = c(0.95)) {
est = predict(model,newdata=newdata)
alpha = (1 - level)
alpha_2 = alpha/2
crit = qt(1-alpha_2,df = nrow(cats) - 2)
crit
}
calc_pred_int(cat_model, newcat_1)
summary(model)$sigma
beta_0 = 5
beta_1 = 2
sigma_2 = 9
sigma = sqrt(sigma_2)
birthday = 19770411
set.seed(birthday)
n = 25
x = seq(0, 2.5, length = n)
sim_data = function(x,beta0,beta1,n){
epsilon = rnorm(n,mean=0,sd=sigma)
y = beta0 + beta1 * x + epsilon
data.frame(predictor = x, response = y)
}
loop_times = 2500
se_sim = rep(0,loop_times)
beta_1_hat = rep(0,loop_times)
for(i in 1:loop_times){
epsilon = rnorm(n,mean=0,sd=sigma)
data = sim_data(x,beta_0,beta_1,n)
data_model = lm(response~predictor,data=data)
se = sqrt((sum((predict(data_model) - data$response)^2))/(length(data$response) - 2))
beta_1_hat[i] = summary(data_model)$coefficient[2,1]
se_sim[i] = se
}
alpha = (1-0.95)
alpha_2 = alpha/2
crit_95 = qt(alpha_2,df = nrow(data) - 2)
alpha = (1-0.99)
alpha_2 = alpha/2
crit_99 = qt(alpha_2,df = nrow(data) - 2)
Sxx = sum((x - mean(x))^2)
lower_95 = beta_1_hat - crit_95 * se_sim/sqrt(Sxx)
upper_95 = beta_1_hat + crit_95 * se_sim/sqrt(Sxx)
lower_99 = beta_1_hat - crit_99 * se_sim/sqrt(Sxx)
upper_99 = beta_1_hat + crit_99 * se_sim/sqrt(Sxx)
lower_95
upper_95
lower_99
upper_99
?predict
cat_model
predict(cat_model,newdata=newcat_1)
predict(cat_model,newdata=newcat_1,interval="prediction")
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.95)
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.99)
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.95)
18.729 - 12.83018
(18.729 - 12.83018) / 2
alpha = (1 - 0.95)
alpha
alpha/2
alpha_2 = alpha / 2
alpha_2
nrow(cats)
qt(alpha_2,nrow(cars) - 2)
qt(1-alpha_2,nrow(cars) - 2)
crit_95 = qt(1-alpha_2,nrow(cars) - 2)
newcat_1
predict(cat_model,newdata=newcat_1)
predict(cat_model,newdata=newcat_1,interval="prediction")
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.99)
predict(cat_model,newdata=newcat_1)
y_hat = predict(cat_model,newdata=newcat_1)
y_hat - crit.X = 12.8301
y_hat
y_hat - 12.8301
(y_hat - 12.8301)/crit
X_FIND = (y_hat - 12.8301)/crit
y_hat + crit * X_FIND
crit_95
crit
crit_95 = qt(1-alpha_2,nrow(cars) - 2)
1-alpha_2
crit_95
crit_95
crit
X_FIND = (y_hat - 12.8301)/crit_95
X_FIND
y_hat - crit * X_FIND
predict(cat_model,newdata=newcat_1,interval="prediction")
y_hat
1-alpha_2
crit_95 = qt(1-alpha_2,nrow(cars) - 2)
y_hat
y_hat - crit_95 * X = 12.83018
y_hat - 12.83018
(y_hat - 12.83018) / crit_95
X_FIND = (y_hat - 12.83018) / crit_95
X_FIND
y_hat - crit_95 * X_FIND
predict(cat_model,newdata=newcat_1,interval="prediction")
y_hat + crit_95 * X_FIND
crit_95 = qt(1-alpha_2,nrow(cars) - 2)
alpha = (1 - 0.99)
alpha_2 = alpha / 2
alpha_2
crit_99 = qt(1-alpha_2,nrow(cars) - 2)
crit_99
y_hat - crit_99 * X_FIND
y_hat + crit_99 * X_FIND
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.99)
1-alpha_2
y_hat
crit_99
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.95)
y_hat
y_hat - crit * X = 12.83018
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.95)
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.95)[2]
lwr = predict(cat_model,newdata=newcat_1,interval="prediction",level=0.95)[2]
lwr
y_hat - lwr = crit * X
(y_hat - lwr) / crit
(y_hat - lwr) / crit_99
(1- 0.95)/2
1-0.025
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.95)
confint(cat_model)
(1- 0.99)/2
1 - 0.005
crit_95
crit_95 = qt(0.975,df = nrow(cats) - 2)
crit_95
crit_95 = qt(1-alpha_2,nrow(cars) - 2)
crit_95
1-alpha_2
crit_95
y_hat
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.95)
y_hat
y_hat - crit_95 * X = 12.83018
lwr
X_FIND = (y_hat - lwr) / crit_95
X_FIND
y_hat - crit * X_FIND
y_hat - crit * X_FIND
y_hat + crit * X_FIND
y_hat
crit_95
alpha = 0.95
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.95)
predict(cat_model,newdata=newcat_1,interval="prediction")
alpha = 0.95
alpha / 2
1 - alpha
(1 - alpha) / 2
cat_model
predict(cat_model)
length(predict(cat_model))
qt(1-(1 - alpha) / 2,length(predict(cat_model)) - 2)
crit_95
crit_95 = qt(1-(1 - alpha) / 2,length(predict(cat_model)) - 2)
y_hat
y_hat - crit * X = lwr
(y_hat - lwr) / crit_95
X_FIND = (y_hat - lwr) / crit_95
y_hat - crit_95 * X_FIND
y_hat + crit_95 * X_FIND
predict(cat_model,newdata=newcat_1,interval="prediction")
crit_95 = qt(1-(1 - alpha) / 2,length(predict(cat_model)) - 2)
alpha = 0.99
crit_99 = qt(1-(1 - alpha) / 2,length(predict(cat_model)) - 2)
crit_99
y_hat - crit_99 * X_FIND
predict(cat_model,newdata=newcat_1,interval="prediction",level=0.99)
y_hat + crit_99 * X_FIND
crit_95 = qt(1-(1 - 0.95) / 2,length(predict(cat_model)) - 2)
crit_95
lwr = predict(cat_model,newdata=newcat_1,interval="prediction")[2]
lwr
crit_95 = qt(1-(1 - 0.95) / 2,length(predict(cat_model)) - 2)
y_hat = predict(model,newdata=newdata)
y_hat = predict(model,newdata=newcat_1)
y_hat = predict(cat_model,newdata=newcat_1)
y_hat
lwr = predict(cat_model,newdata=newcat_1,interval="prediction")[2]
lwr
X_FIND = (y_hat - lwr) / crit_95
X_FIND
calc_pred_int = function (model, newdata, level = c(0.95)) {
crit_95 = qt(1-(1 - 0.95) / 2,length(predict(cat_model)) - 2)
y_hat = predict(model,newdata=newdata)
lwr = predict(cat_model,newdata=newcat_1,interval="prediction")[2]
X_FIND = (y_hat - lwr) / crit_95
crit = qt(1-(1 - level) / 2,length(predict(cat_model)) - 2)
lower = (y_hat - crit * X_FIND)
upper = (y_hat + crit * X_FIND)
c(y_hat,lower,upper)
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
predict(cat_model,newdata=newcat_2, level = 0.99)
newcat_2
predict(cat_model,newdata=newcat_2,interval="prediction",level = 0.99)
newdata
calc_pred_int = function (model, newdata, level = c(0.95)) {
print (newdata)
print (level)
crit_95 = qt(1-(1 - 0.95) / 2,length(predict(cat_model)) - 2)
y_hat = predict(model,newdata=newdata)
lwr = predict(cat_model,newdata=newcat_1,interval="prediction")[2]
X_FIND = (y_hat - lwr) / crit_95
crit = qt(1-(1 - level) / 2,length(predict(cat_model)) - 2)
lower = (y_hat - crit * X_FIND)
upper = (y_hat + crit * X_FIND)
c(y_hat,lower,upper)
}
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
calc_pred_int = function (model, newdata, level = c(0.95)) {
print (newdata)
print (level)
crit_95 = qt(1-(1 - 0.95) / 2,length(predict(cat_model)) - 2)
print (crit_95)
y_hat = predict(model,newdata=newdata)
print (y_hat)
lwr = predict(cat_model,newdata=newcat_1,interval="prediction")[2]
print (lwr)
X_FIND = (y_hat - lwr) / crit_95
print (X_FIND)
crit = qt(1-(1 - level) / 2,length(predict(cat_model)) - 2)
lower = (y_hat - crit * X_FIND)
upper = (y_hat + crit * X_FIND)
c(y_hat,lower,upper)
}
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
predict(model,newdata=newcat_2)
predict(model,newdata=newcat_2)
newcat_2
predict(cat_model,newdata=newcat_2)
calc_pred_int(cat_model, newcat_2, level = 0.99)
predict(cat_model,newdata=newcat_2,interval="prediction")
calc_pred_int = function (model, newdata, level = c(0.95)) {
print (newdata)
print (level)
crit_95 = qt(1-(1 - 0.95) / 2,length(predict(cat_model)) - 2)
print (crit_95)
y_hat = predict(model,newdata=newdata)
print (y_hat)
lwr = predict(cat_model,newdata=newdata,interval="prediction")[2]
print (lwr)
X_FIND = (y_hat - lwr) / crit_95
print (X_FIND)
crit = qt(1-(1 - level) / 2,length(predict(cat_model)) - 2)
lower = (y_hat - crit * X_FIND)
upper = (y_hat + crit * X_FIND)
c(y_hat,lower,upper)
}
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
calc_pred_int = function (model, newdata, level = c(0.95)) {
#print (newdata)
#print (level)
crit_95 = qt(1-(1 - 0.95) / 2,length(predict(cat_model)) - 2)
#print (crit_95)
y_hat = predict(model,newdata=newdata)
#print (y_hat)
lwr = predict(cat_model,newdata=newdata,interval="prediction")[2]
#print (lwr)
X_FIND = (y_hat - lwr) / crit_95
#print (X_FIND)
crit = qt(1-(1 - level) / 2,length(predict(cat_model)) - 2)
lower = (y_hat - crit * X_FIND)
upper = (y_hat + crit * X_FIND)
c(y_hat,lower,upper)
}
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
predict(cat_model,newdata=newcat_2,interval="prediction",level=0.99)
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
