mean(beta_hat_1)
sd(beta_hat_1)
mean(beta_hat_1)
sd(beta_hat_1)
setwd("~/Documents/Illinois/STAT 420 -  Statistical Modeling in R/HW2")
library(MASS)
data = MASS::cats
cat_model = lm(Hwt~Bwt,data=cats)
summary(cat_model)
cat_model
data
head(cat,10)
head(data,10)
Sxy = (data$Bwt-mean(data$Bwt))*(data$Hwt - mean(data$Hwt))
Sxy = (data$Bwt-mean(data$Bwt))*(data$Hwt - mean(data$Hwt))
Sxy
Sxy = sum((data$Bwt-mean(data$Bwt))*(data$Hwt - mean(data$Hwt)))
Sxy
Sxx = sum((data$Bwt-mean(data$Bwt)^2)
Sxx = sum((data$Bwt-mean(data$Bwt)^2))
Sxx
Sxx = ((data$Bwt-mean(data$Bwt))^2)
Sxx
Sxx = sum((data$Bwt-mean(data$Bwt))^2)
Sxx
Sxy/Sxx
cat_model
beta_1=Sxy/Sxx
mean(data$Hwt) - beta_1 * mean(data$Bwt)
cat_model
library(MASS)
data = MASS::cats
cat_model = lm(Hwt~Bwt,data=cats)
summary(cat_model)
library(MASS)
data = MASS::cats
cat_model = lm(Hwt~Bwt,data=cats)
summary(cat_model)
summary(cat_model)
names(summary(cat_model))
summary(cat_model)$coefficients
summary(cat_model)$coefficients[,]
summary(cat_model)$coefficients[,1]
?cats
cat_model
summary(cat_model)$r2.squared
summary(cat_model)$r.squared
SSTot = sum((cats$Hwt - mean(cats$Hwt))^2)
SSReg = sum((fitted(cat_model) - mean(cats$Hwt))^2)
R2 =  SSReg / SSTot
R2
x
fitted(sim_fit_x)
sim_data_x = sim_slr(x=x, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
sim_fit_x = lm(response~predictor,data = sim_data_x)
sim_fit_x
sim_fit_x
fitted(sim_fit_x)
x
sim_data_x
names(sim_data_x)
sim_data_x$response
sim_data_x
sim_data_x$response
x
sim_data_x$response
fitted(sim_fit_x)
sim_data_x = sim_slr(x=x, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
sim_fit_x = lm(response~predictor,data = sim_data_x)
sim_fit_x
sim_data_x$response
sim_data_x = sim_slr(x=x, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
sim_fit_x = lm(response~predictor,data = sim_data_x)
sim_fit_x
fitted(sim_fit_x)
sim_data_x$response
sim_data_x = sim_slr(x=x, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
sim_fit_x = lm(response~predictor,data = sim_data_x)
sim_fit_x
fitted(sim_fit_x)
sim_data_x$response
plot(response~predictor,
data=sim_data,
xlab = "Simulated Predicted Variable",
ylab = "Simulated Response Variable",
pch = 1,
cex = 1,
col = "brown",
ylim = c(-60,10))
abline(beta_0,beta_1,lty=2,lwd=1,col="red")
abline(sim_fit_x,lty=1,lwd=1,col="purple")
legend("topright",c("Truth","Estimate"),lty=c(2,1),lwd=2,col=c("red","purple"))
plot(response~predictor,
data=sim_data,
xlab = "Simulated Predicted Variable",
ylab = "Simulated Response Variable",
pch = 1,
cex = 1,
col = "brown",
ylim = c(-60,10))
abline(beta_0,beta_1,lty=2,lwd=1,col="red")
abline(sim_fit_x,lty=1,lwd=1,col="purple")
legend("topright",c("Truth","Estimate"),lty=c(2,1),lwd=2,col=c("red","purple"))
x = runif(n = 25, 0, 10)
sim_data_x = sim_slr(x=x, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
sim_fit_x = lm(response~predictor,data = sim_data_x)
sim_fit_x
fitted(sim_fit_x)
sim_data_x$response
plot(response~predictor,
data=sim_data,
xlab = "Simulated Predicted Variable",
ylab = "Simulated Response Variable",
pch = 1,
cex = 1,
col = "brown",
ylim = c(-60,10))
abline(beta_0,beta_1,lty=2,lwd=1,col="red")
abline(sim_fit_x,lty=1,lwd=1,col="purple")
legend("topright",c("Truth","Estimate"),lty=c(2,1),lwd=2,col=c("red","purple"))
beta_0
beta_1
birthday = 19770411
set.seed(birthday)
num_obs = 25
beta_0 = 5
beta_1 = -3
sim_slr=function(x, beta_0 = 5, beta_1 = -3, sigma){
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame (predictor = x, response = y)
}
x_vals = seq(from = 0, to = 25, length.out = num_obs)
sim_data = sim_slr(x=x_vals, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
sim_data
x = runif(n = 25, 0, 10)
sim_data_x = sim_slr(x=x, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
sim_fit_x = lm(response~predictor,data = sim_data_x)
sim_fit_x
fitted(sim_fit_x)
sim_data_x$response
plot(response~predictor,
data=sim_data,
xlab = "Simulated Predicted Variable",
ylab = "Simulated Response Variable",
pch = 1,
cex = 1,
col = "brown",
ylim = c(-60,10))
abline(beta_0,beta_1,lty=2,lwd=1,col="red")
abline(sim_fit_x,lty=1,lwd=1,col="purple")
legend("topright",c("Truth","Estimate"),lty=c(2,1),lwd=2,col=c("red","purple"))
sim_data_x
sim_data_x$response
fitted(sim_fit_x)
sim_data_x$response - fitted(sim_fit_x)
(sim_data_x$response - fitted(sim_fit_x))
(sim_data_x$response - fitted(sim_fit_x))^2
sum((sim_data_x$response - fitted(sim_fit_x))^2)
abs(sim_data_x$response - fitted(sim_fit_x))
sum(abs(sim_data_x$response - fitted(sim_fit_x)))
(sim_data_x$response - fitted(sim_fit_x))^2
sum((sim_data_x$response - fitted(sim_fit_x))^2)
# Chunk 1
library(MASS)
data = MASS::cats
cat_model = lm(Hwt~Bwt,data=cats)
summary(cat_model)
# Chunk 2
beta_0_hat = coef(cat_model)[1]
beta_1_hat = coef(cat_model)[2]
c(beta_0_hat,beta_1_hat)
# Chunk 3
predict(cat_model,newdata=data.frame(Bwt=2.7))
# Chunk 4
predict(cat_model,newdata=data.frame(Bwt=4.4))
# Chunk 5
plot(Hwt~Bwt,
data = cats,
xlab = "Cat's Brain Weight (In Kg)",
ylab = "Cat's Heart Weight (In gram)",
main = "Cat's Heart's Weight Vs Brain's Weight",
pch = 1,
cex = 1,
col = "red"
)
abline(cat_model,lwd = 1, col = "green")
# Chunk 6
SSTot = sum((cats$Hwt - mean(cats$Hwt))^2)
SSReg = sum((fitted(cat_model) - mean(cats$Hwt))^2)
R2 =  SSReg / SSTot
# Chunk 7
get_sd_est = function (fitted_vals,actual_vals,mle=FALSE){
if (mle){
sigma_2 = sum((actual_vals - fitted_vals)^2)
res_mean = sigma_2 / length(actual_vals)
}
else{
se_2 = sum((actual_vals - fitted_vals)^2)
res_mean = se_2 / (length(actual_vals) - 2)
}
sqrt(res_mean)
}
# Chunk 8
birthday = 19770411
set.seed(birthday)
num_obs = 25
beta_0 = 5
beta_1 = -3
sim_slr=function(x, beta_0 = 5, beta_1 = -3, sigma){
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame (predictor = x, response = y)
}
x_vals = seq(from = 0, to = 25, length.out = num_obs)
sim_data = sim_slr(x=x_vals, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
sim_data
# Chunk 9
x = runif(n = 25, 0, 10)
# Chunk 10
sim_data_x = sim_slr(x=x, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
sim_fit_x = lm(response~predictor,data = sim_data_x)
sim_fit_x
# Chunk 11
plot(response~predictor,
data=sim_data,
xlab = "Simulated Predicted Variable",
ylab = "Simulated Response Variable",
pch = 1,
cex = 1,
col = "brown",
ylim = c(-60,10))
abline(beta_0,beta_1,lty=2,lwd=1,col="red")
abline(sim_fit_x,lty=1,lwd=1,col="purple")
legend("topright",c("Truth","Estimate"),lty=c(2,1),lwd=2,col=c("red","purple"))
# Chunk 12
beta_hat_1 = rep(0,1500)
for (k in 1:1500){
temp_sim_data = sim_slr(x=x, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
temp_sim_slr_fit = lm(response~predictor,data=temp_sim_data)
beta_hat_1[k] = coef(temp_sim_slr_fit)[2]
}
# Chunk 13
mean(beta_hat_1)
sd(beta_hat_1)
# Chunk 14
hist(beta_hat_1,
xlab = "beta_hat_1 values",
main = "beta_hat_1 Histogram",
col = "#CCCC00",
border = "#333300"
)
# Chunk 1
library(MASS)
data = MASS::cats
cat_model = lm(Hwt~Bwt,data=cats)
summary(cat_model)
# Chunk 2
beta_0_hat = coef(cat_model)[1]
beta_1_hat = coef(cat_model)[2]
c(beta_0_hat,beta_1_hat)
# Chunk 3
predict(cat_model,newdata=data.frame(Bwt=2.7))
# Chunk 4
predict(cat_model,newdata=data.frame(Bwt=4.4))
# Chunk 5
plot(Hwt~Bwt,
data = cats,
xlab = "Cat's Brain Weight (In Kg)",
ylab = "Cat's Heart Weight (In gram)",
main = "Cat's Heart's Weight Vs Brain's Weight",
pch = 1,
cex = 1,
col = "red"
)
abline(cat_model,lwd = 1, col = "green")
# Chunk 6
SSTot = sum((cats$Hwt - mean(cats$Hwt))^2)
SSReg = sum((fitted(cat_model) - mean(cats$Hwt))^2)
R2 =  SSReg / SSTot
# Chunk 7
get_sd_est = function (fitted_vals,actual_vals,mle=FALSE){
if (mle){
sigma_2 = sum((actual_vals - fitted_vals)^2)
res_mean = sigma_2 / length(actual_vals)
}
else{
se_2 = sum((actual_vals - fitted_vals)^2)
res_mean = se_2 / (length(actual_vals) - 2)
}
sqrt(res_mean)
}
# Chunk 8
birthday = 19770411
set.seed(birthday)
num_obs = 25
beta_0 = 5
beta_1 = -3
sim_slr=function(x, beta_0 = 5, beta_1 = -3, sigma){
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame (predictor = x, response = y)
}
x_vals = seq(from = 0, to = 25, length.out = num_obs)
sim_data = sim_slr(x=x_vals, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
sim_data
# Chunk 9
x = runif(n = 25, 0, 10)
# Chunk 10
sim_data_x = sim_slr(x=x, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
sim_fit_x = lm(response~predictor,data = sim_data_x)
sim_fit_x
# Chunk 11
plot(response~predictor,
data=sim_data,
xlab = "Simulated Predicted Variable",
ylab = "Simulated Response Variable",
pch = 1,
cex = 1,
col = "brown",
ylim = c(-60,10))
abline(beta_0,beta_1,lty=2,lwd=1,col="red")
abline(sim_fit_x,lty=1,lwd=1,col="purple")
legend("topright",c("Truth","Estimate"),lty=c(2,1),lwd=2,col=c("red","purple"))
# Chunk 12
beta_hat_1 = rep(0,1500)
for (k in 1:1500){
temp_sim_data = sim_slr(x=x, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24))
temp_sim_slr_fit = lm(response~predictor,data=temp_sim_data)
beta_hat_1[k] = coef(temp_sim_slr_fit)[2]
}
# Chunk 13
mean(beta_hat_1)
sd(beta_hat_1)
# Chunk 14
hist(beta_hat_1,
xlab = "beta_hat_1 values",
main = "beta_hat_1 Histogram",
col = "#CCCC00",
border = "#333300"
)
hist(beta_hat_1,
xlab = "beta_hat_1 values",
main = "beta_hat_1 Histogram",
col = "#CCCC00",
border = "#333300"
)
hist(beta_hat_1,
xlab = "beta_hat_1 values",
main = "beta_hat_1 Histogram",
col = "orange",
border = "#333300"
)
birthday = 19770411
set.seed(birthday)
x = runif(n = 75, 0, 10)
num_obs = 75
beta_0 = 3
beta_1 = 0
sigma = sqrt(4)
skeptic_beta_hat_1 = rep(0,2500)
for (k in 1:2500){
temp_sim_data = sim_slr(x=x, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
temp_sim_slr_fit = lm(response~predictor,data=temp_sim_data)
skeptic_beta_hat_1[k] = coef(temp_sim_slr_fit)[2]
}
hist(skeptic_beta_hat_1,
xlab = "beta_hat_1 values",
main = "beta_hat_1 Histogram",
col = "orange",
border = "#333300"
)
skeptic_beta_hat_1
length(skeptic_beta_hat_1)
beta_hat_1
length(beta_hat_1)
birthday = 19770411
set.seed(birthday)
x = runif(n = 75, 0, 10)
num_obs = 75
beta_0 = 3
beta_1 = 0
sigma = sqrt(4)
beta_hat_1 = rep(0,2500)
for (k in 1:2500){
temp_sim_data = sim_slr(x=x, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
temp_sim_slr_fit = lm(response~predictor,data=temp_sim_data)
beta_hat_1[k] = coef(temp_sim_slr_fit)[2]
}
hist(beta_hat_1,
xlab = "beta_hat_1 values",
main = "beta_hat_1 Histogram",
col = "orange",
border = "#333300"
)
hist(beta_hat_1,
xlab = "beta_hat_1 values",
main = "beta_hat_1 Histogram",
col = "orange",
border = "#333300"
)
abline(v=coef(skeptic_fit)[2],col="red",lwd=4)
hist(beta_hat_1,
xlab = "beta_hat_1 values",
main = "beta_hat_1 Histogram",
col = "orange",
border = "#333300"
)
birthday = 19770411
set.seed(birthday)
x = runif(n = 75, 0, 10)
num_obs = 75
beta_0 = 3
beta_1 = 0
sigma = sqrt(4)
beta_hat_1 = rep(0,2500)
for (k in 1:2500){
temp_sim_data = sim_slr(x=x, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
temp_sim_slr_fit = lm(response~predictor,data=temp_sim_data)
beta_hat_1[k] = coef(temp_sim_slr_fit)[2]
}
hist(beta_hat_1,
xlab = "beta_hat_1 values",
main = "beta_hat_1 Histogram",
col = "orange",
border = "#333300"
)
library(readr)
skeptic = read_csv("skeptic.csv")
skeptic_fit = lm(response~predictor,data=skeptic)
skeptic_fit
hist(beta_hat_1,
xlab = "beta_hat_1 values",
main = "beta_hat_1 Histogram",
col = "orange",
border = "#333300"
)
abline(v=coef(skeptic_fit)[2],col="red",lwd=4)
skeptic_fit
fitted(skeptic_fit)
skeptic
skeptic$response
skeptic$response - fitted(skeptic_fit)
(skeptic$response - fitted(skeptic_fit))^2
((skeptic$response - fitted(skeptic_fit))^2)
sum((skeptic$response - fitted(skeptic_fit))^2)
sum((skeptic$response - fitted(skeptic_fit))^2)
length(skeptic$response)
sum((skeptic$response - fitted(skeptic_fit))^2) / (length(skeptic$response) - 2)
sqrt(sum((skeptic$response - fitted(skeptic_fit))^2) / (length(skeptic$response) - 2))
library(knitr)
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
ozone_model1 = lm(ozone~wind,data=Ozone)
ozone_model2 = lm(ozone~humidity,data=Ozone)
ozone_model3 = lm(ozone~temp,data=Ozone)
ozone_model1_rmse = sqrt((sum((Ozone$ozone - predict(ozone_model1))^2))/length(Ozone$ozone))
ozone_model2_rmse = sqrt((sum((Ozone$ozone - predict(ozone_model2))^2))/length(Ozone$ozone))
ozone_model3_rmse = sqrt((sum((Ozone$ozone - predict(ozone_model3))^2))/length(Ozone$ozone))
ozone_model1_r2 = (summary(ozone_model1))$r.squared
ozone_model2_r2 = (summary(ozone_model2))$r.squared
ozone_model3_r2 = (summary(ozone_model3))$r.squared
model_compare = data.frame(
x = c("Model 1","Model 2","Model 3"),
rmse = c(ozone_model1_rmse,ozone_model2_rmse,ozone_model3_rmse),
r2 = c(ozone_model1_r2,ozone_model2_r2,ozone_model3_r2)
)
kable(model_compare, format = "pandoc",padding = 2,caption = "Model Comparision Table Between Model 1 Vs Model 2 Vs Model 3")
ozone_model1
precit(ozone_model1)
predict(ozone_model1)
ozone_model1
Ozone
names(Ozone)
head(Ozone,5)
ozone_model1
11.8636 + (-0.0445) * 4
11.8636 + (-0.0445) * Ozone$wind
(11.8636 + (-0.0445) * Ozone$wind)
Ozone$ozone - (11.8636 + (-0.0445) * Ozone$wind)
(Ozone$ozone - (11.8636 + (-0.0445) * Ozone$wind))^2
((Ozone$ozone - (11.8636 + (-0.0445) * Ozone$wind))^2)
sum((Ozone$ozone - (11.8636 + (-0.0445) * Ozone$wind))^2)
sum((Ozone$ozone - (11.8636 + (-0.0445) * Ozone$wind))^2)
sum((Ozone$ozone - (11.8636 + (-0.0445) * Ozone$wind))^2) / length(Ozone$ozone)
(sum((Ozone$ozone - (11.8636 + (-0.0445) * Ozone$wind))^2) / length(Ozone$ozone))
sqrt(sum((Ozone$ozone - (11.8636 + (-0.0445) * Ozone$wind))^2) / length(Ozone$ozone))
library(knitr)
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
ozone_model1 = lm(ozone~wind,data=Ozone)
ozone_model2 = lm(ozone~humidity,data=Ozone)
ozone_model3 = lm(ozone~temp,data=Ozone)
ozone_model1_rmse = sqrt((sum((Ozone$ozone - predict(ozone_model1))^2))/length(Ozone$ozone))
ozone_model2_rmse = sqrt((sum((Ozone$ozone - predict(ozone_model2))^2))/length(Ozone$ozone))
ozone_model3_rmse = sqrt((sum((Ozone$ozone - predict(ozone_model3))^2))/length(Ozone$ozone))
ozone_model1_r2 = (summary(ozone_model1))$r.squared
ozone_model2_r2 = (summary(ozone_model2))$r.squared
ozone_model3_r2 = (summary(ozone_model3))$r.squared
model_compare = data.frame(
x = c("Model 1","Model 2","Model 3"),
rmse = c(ozone_model1_rmse,ozone_model2_rmse,ozone_model3_rmse),
r2 = c(ozone_model1_r2,ozone_model2_r2,ozone_model3_r2)
)
kable(model_compare, format = "pandoc",padding = 2,caption = "Model Comparision Table Between Model 1 Vs Model 2 Vs Model 3")
