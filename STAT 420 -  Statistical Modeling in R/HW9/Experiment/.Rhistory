data_2$y = with(data_2, 5 + 2 * x + rnorm(n = 20))
fit_2 = lm(y ~ x, data = data_2)
data_3 = data.frame(x = runif(n = 40, min = 0, max = 10),
y = rep(x = 0, times = 40))
data_3$y = with(data_3, 2 + 1 * x + rnorm(n = 40, sd = x))
fit_3 = lm(y ~ x, data = data_3)
bptest(fit_2)
shapiro.test(fit_2)
shapiro.test(resid(fit_2))
prostate_add_model = lm(lpsa~.,data = prostate_data)
summary(prostate_add_model)
bptest(prostate_add_model)
bptest(resid(prostate_add_model))
shapiro.test(resid(prostate_add_model))
hatvalues(prostate_add_model) > 2 * mean(hatvalues(prostate_add_model))
hatvalues(prostate_add_model)[hatvalues(prostate_add_model) > 2 * mean(hatvalues(prostate_add_model))]
cooks.distance(prostate_add_model) > (4/length(cooks.distance(prostate_add_model)
cooks.distance(prostate_add_model) > (4/length(cooks.distance(prostate_add_model))
cooks.distance(prostate_add_model) > (4/length(cooks.distance(prostate_add_model)))
faraway::corrosion
?faraway::corrosion
corrosion_data = faraway::corrosion
corrosion_slr_fit = lm(loss ~ Fe, data = corrosion_data)
corrosion_slr_fit
plot(loss~Fe, data=corrosion_data,pch = 1, cex = 1, main = "Weight loss in mg per square decimeter per day Vs Iron content in percent In Corrosion loss")
abline(corrosion_slr_fit, col = "dodgerblue", lwd = 2, lty = 1)
plot(loss~Fe, data=corrosion_data,pch = 1, cex = 1, main = "Weight loss in mg per square decimeter per day Vs Iron content in percent In Corrosion loss",main.cex = 0.8)
abline(corrosion_slr_fit, col = "dodgerblue", lwd = 2, lty = 1)
plot(loss~Fe, data=corrosion_data,pch = 1, cex = 1, main = "Weight loss in mg per square decimeter per day Vs Iron content in percent In Corrosion loss",cex.main = 0.8)
abline(corrosion_slr_fit, col = "dodgerblue", lwd = 2, lty = 1)
setwd("~/Documents/GitHub/Illinois/STAT 420 -  Statistical Modeling in R/HW8/w08-hw")
data = read.table("https://http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data",
quote = "\"",
comment.char = "",
stringsAsFactors = FALSE)
data = read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data",
quote = "\"",
comment.char = "",
stringsAsFactors = FALSE)
data
data = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data",
quote = "\"",
comment.char = "",
stringsAsFactors = FALSE)
data
data = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data",
quote = "\"",
comment.char = "",
stringsAsFactors = FALSE,header = FALSE)
head(data,5)
names(data)
colnames(data) = c("sex","Length","Diameter","Height","Whole weight","Shucked weight","Viscera weight","Shell weight","Rings")
names(data)
dim(data)
data
model = lm(Rings~.,data=data)
model
names(data)
plot(Rings~Length)
plot(Rings~Length,data=data)
plot(Rings~Diameter,data=data)
plot(Rings~Height,data=data)
plot(Rings~"Whole weight",data=data)
data = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data",
quote = "\"",
comment.char = "",
stringsAsFactors = FALSE,header = FALSE)
colnames(data) = c("sex","Length","Diameter","Height","Wholeweight","Shuckedweight","Visceraweight","Shellweight","Rings")
plot(Rings~Wholeweight,data=data)
plot(Rings~Shuckedweight,data=data)
plot(Rings~Visceraweight,data=data)
plot(Rings~Shellweight,data=data)
plot(predict(model),resid(model))
plot( h = 0)
abline( h = 0)
resid(model)
resid(model)^2
sum(resid(model)^2)
hist(data$Rings)
hist(log(data$Rings))
hist((data$Rings))
model = lm(Rings~Length*Diameter*Wholeweight*Shuckedweight*Visceraweight*Shellweight,data=data)
model
plot(predict(model),resid(model))
abline( h = 0)
abalone = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data",
quote = "\"",
comment.char = "",
stringsAsFactors = FALSE,header = FALSE)
colnames(abalone) = c("sex","Length","Diameter","Height","Wholeweight","Shuckedweight","Visceraweight","Shellweight","Rings")
qplot(abalone$rings, binwidth=1)
library(ggplot2)
qplot(abalone$rings, binwidth=1)
abalone
qplot(shell.wt, rings, data=abalone)
qplot(Shellweight, rings, data=abalone)
qplot(Shellweight, Rings, data=abalone)
qplot(Shellweight, Rings, data=abalone, geom=c("point", "smooth"), method="lm")
qplot(Shellweight, rings, data=abalone, geom=c("point", "smooth"), method="lm",
color=sex, se=F)
qplot(Shellweight, Rings, data=abalone, geom=c("point", "smooth"), method="lm",
color=sex, se=F)
mtcars
pairs(mtcars,col = "dodgerblue")
?seatpos
pairs(seatpos)
pairs(seatpos,col = "dodgerblue")
setwd("~/Documents/GitHub/Illinois/STAT 420 -  Statistical Modeling in R/HW9/Experiment")
plots(pafaraway::seatpos,col = "dodgerblue")
pairs(pafaraway::seatpos,col = "dodgerblue")
pairs(faraway::seatpos,col = "dodgerblue")
pairs(faraway::seatpos,col = "dodgerblue")
corr(seatpos)
seatpos
?seatpos
cor(seatpos)
round(cor(seatpos),2)
hip_model = lm(hipcenter~., data = seatpos)
hip_model = lm(hipcenter~., data = seatpos)
summary(hip_model)
pairs(farawayseatpos,col = "dodgerblue")
pairs(seatpos,col = "dodgerblue")
pairs(seatpos,col = "dodgerblue")
pairs(seatpos,col = "dodgerblue")
car::vif(hip_model)
install.packages("car")
car::vif(hip_model)
ht_shoes_model = lm(HtShoes~.-hipcenter, data = seatpos)
ht_shoes_model = lm(HtShoes~.-hipcenter, data = seatpos)
ht_shoes_model
ht_shoes_model = lm(HtShoes~.-hipcenter, data = seatpos)
coef(ht_shoes_model)$r.squared
ht_shoes_model
coefficient(ht_shoes_model)
coef(ht_shoes_model)
summary(ht_shoes_model)
(ht_shoes_model)$coefficient
(ht_shoes_model)
summary(ht_shoes_model)
summary(ht_shoes_model)$r.squared
ht_shoes_model = lm(HtShoes~.-hipcenter, data = seatpos)
summary(ht_shoes_model)$r.squared
car::vig(ht_shoes_model)
car::vif(ht_shoes_model)
noise = rnorm(n = nrow(seatpos), mean = 0, sd = 5)
hip_model_noise = lm(hipcenter+noise~., data = seatpos)
hip_model
hip_model_noise
noise = rnorm(n = nrow(seatpos), mean = 0, sd = 5)
hip_model_noise = lm(hipcenter+noise~., data = seatpos)
hip_model
hip_model_noise
set.seed(1337)
noise = rnorm(n = nrow(seatpos), mean = 0, sd = 5)
hip_model_noise = lm(hipcenter+noise~., data = seatpos)
hip_model
hip_model_noise
coef(hip_model)
coef(hip_model_noise)
coef(hip_model)
coef(hip_model_noise)
hip_model
hip_model_noise
plot(fitted(hip_model),resid(hip_model_noise),col = "dodgerblue", pch = 1, cex = 1, xlab = "Predicted, without Noise", ylab = "Predicted, with Noise")
plot(fitted(hip_model),resid(hip_model_noise),col = "dodgerblue", pch = 1, cex = 1, xlab = "Predicted, without Noise", ylab = "Predicted, with Noise")
hip_model = lm(hipcenter~., data = seatpos)
set.seed(1337)
noise = rnorm(n = nrow(seatpos), mean = 0, sd = 5)
hip_model_noise = lm(hipcenter+noise~., data = seatpos)
fitted(hip_model)
fitted(hip_model_noise)
plot(fitted(hip_model),resid(hip_model_noise),col = "dodgerblue", pch = 1, cex = 1, xlab = "Predicted, without Noise", ylab = "Predicted, with Noise")
plot(fitted(hip_model),resid(hip_model_noise))
plot(fitted(hip_model),fitted(hip_model_noise),col = "dodgerblue", pch = 1, cex = 1, xlab = "Predicted, without Noise", ylab = "Predicted, with Noise")
plot(fitted(hip_model),fitted(hip_model_noise),col = "dodgerblue", pch = 1, cex = 1, xlab = "Predicted, without Noise", ylab = "Predicted, with Noise")
plot(fitted(hip_model),fitted(hip_model_noise),col = "dodgerblue", pch = 1, cex = 1, xlab = "Predicted, without Noise", ylab = "Predicted, with Noise")
abline(0, 1, col = "darkorange")
plot(fitted(hip_model),fitted(hip_model_noise),col = "dodgerblue", pch = 1, cex = 1, xlab = "Predicted, without Noise", ylab = "Predicted, with Noise")
abline(0, 1, col = "darkorange",lwd = 2)
plot(fitted(hip_model),fitted(hip_model_noise),col = "dodgerblue", pch = 1, cex = 1, xlab = "Predicted, without Noise", ylab = "Predicted, with Noise")
#abline(0, 1, col = "darkorange",lwd = 2)
lines(fitted(hip_model),fitted(hip_model_noise))
plot(fitted(hip_model),fitted(hip_model_noise),col = "dodgerblue", pch = 1, cex = 1, xlab = "Predicted, without Noise", ylab = "Predicted, with Noise")
#abline(0, 1, col = "darkorange",lwd = 2)
curve(fitted(hip_model),fitted(hip_model_noise))
plot(fitted(hip_model),fitted(hip_model_noise),col = "dodgerblue", pch = 1, cex = 1, xlab = "Predicted, without Noise", ylab = "Predicted, with Noise")
abline(0, 1, col = "darkorange",lwd = 2)
names(seatpos)
hip_model_small = lm(hipcenter~Arm + Age + Ht, data = seatpos)
hip_model_small
vif(hip_model_small)
vif(hip_model_small)
hip_model_small = lm(hipcenter~ Age + Arm + Ht, data = seatpos)
hip_model_small
vif(hip_model_small)
noise = rnorm(nrow(seatpos), mean = 0, sd = 5)
hip_center_model_noise = lm(hipcenter ~ Age + Arm + Ht + noise, data = seatpos)
coef(hip_center_model)
coef(hip_center_model)
noise = rnorm(nrow(seatpos), mean = 0, sd = 5)
hip_model_small_noise = lm(hipcenter ~ Age + Arm + Ht + noise, data = seatpos)
coef(hip_model)
coef(hip_model_noise)
coef(hip_model_small)
coef(hip_model_small_noise)
noise = rnorm(nrow(seatpos), mean = 0, sd = 5)
hip_model_small_noise = lm(hipcenter + noise ~ Age + Arm + Ht + , data = seatpos)
noise = rnorm(nrow(seatpos), mean = 0, sd = 5)
hip_model_small_noise = lm(hipcenter + noise ~ Age + Arm + Ht , data = seatpos)
coef(hip_model_small)
coef(hip_model_small_noise)
plot(fitted(hip_model_small_noise), fitted(hip_model_small), col = "dodgerblue", pch = 1, cex = 1)
plot(fitted(hip_model_small_noise), fitted(hip_model_small), col = "dodgerblue", pch = 1, cex = 1)
abline (0, 1, col = "darkorange", lty = 2, lwd = 2)
plot(fitted(hip_model_small_noise), fitted(hip_model_small), col = "dodgerblue", pch = 1, cex = 1)
abline (0, 1, col = "darkorange", lty = 1, lwd = 2)
anova(hip_model,hip_model_small)
anova(hip_model_small,hip_model)
anova(hip_model_small,hip_model)
hip_model_small
summary(hip_model_small)
summary(hip_model)
anova(hip_model_small,hip_model)
hip_model_small = lm(hipcenter~ Age + Arm + Ht, data = seatpos)
hip_model_HtShoes = lm(HtShoes~ Age + Arm + Ht, data = setapos)
hip_model_small = lm(hipcenter~ Age + Arm + Ht, data = seatpos)
hip_model_HtShoes = lm(HtShoes~ Age + Arm + Ht, data = seatpos)
cor(resid(hip_model_small),resi(hip_model_HtShoes))
hip_model_small = lm(hipcenter~ Age + Arm + Ht, data = seatpos)
hip_model_HtShoes = lm(HtShoes~ Age + Arm + Ht, data = seatpos)
cor(resid(hip_model_small),resid(hip_model_HtShoes))
plot(resid(hip_model_small),resid(hip_model_HtShoes), col = "dodgerblue", pch = 1, cex = 1)
abline(resid(hip_model_small),resid(hip_model_HtShoes), col = "darkorange", lwd = 2, lty =1 )
plot(resid(hip_model_small),resid(hip_model_HtShoes), col = "dodgerblue", pch = 1, cex = 1)
abline(lm(resid(hip_model_small)~resid(hip_model_HtShoes)), col = "darkorange", lwd = 2, lty =1 )
plot(resid(hip_model_HtShoes),resid(hip_model_small), col = "dodgerblue", pch = 1, cex = 1)
abline(lm(resid(hip_model_small)~resid(hip_model_HtShoes)), col = "darkorange", lwd = 2, lty =1 )
plot(resid(hip_model_HtShoes),resid(hip_model_small), col = "dodgerblue", pch = 1, cex = 1, xlab = "Residuals, Added Predictor", ylab = "Residuals, Original Model")
abline(h = 0, lty = 2)
abline(v = 0, lty = 2)
abline(lm(resid(hip_model_small)~resid(hip_model_HtShoes)), col = "darkorange", lwd = 2, lty =1 )
plot(resid(hip_model_HtShoes),resid(hip_model_small), col = "dodgerblue", pch = 1, cex = 1, xlab = "Residuals, Added Predictor", ylab = "Residuals, Original Model", main = "Variable Added Plot")
abline(h = 0, lty = 2)
abline(v = 0, lty = 2)
abline(lm(resid(hip_model_small)~resid(hip_model_HtShoes)), col = "darkorange", lwd = 2, lty =1 )
sqrt(mean((rsid(fit_lin))^2))
sqrt(mean((resid(fit_lin))^2))
make_poly_data = function(sample_size = 11) {
x = seq(0,10)
y = 3 * x + 4 * x^2 + rnorm(n = sample_size, mean = 0, sd = 5)
data.frame(x,y)
}
set.seed(1234)
poly_data = make_poly_data()
fit_lin = lm(y~x, data = poly_data)
fit_quad = lm(y~poly(x,2), data = poly_data)
fit_big = lm(y~poly(x,8),data = poly_data)
sqrt(mean((resid(fit_lin))^2))
#(resid(fit_quad)
#resid(fit_big)
sqrt(mean((resid(fit_lin))^2))
sqrt(mean((resid(fit_quad))^2))
sqrt(mean((resid(fit_big))^2))
make_poly_data = function(sample_size = 11) {
x = seq(0,10)
y = 3 + x + 4 * x ^ 2 + rnorm(n = sample_size, mean = 0, sd = 5)
data.frame(x,y)
}
set.seed(1234)
poly_data = make_poly_data()
fit_lin = lm(y~x, data = poly_data)
fit_quad = lm(y~poly(x,2), data = poly_data)
fit_big = lm(y~poly(x,8),data = poly_data)
sqrt(mean((resid(fit_lin))^2))
sqrt(mean((resid(fit_quad))^2))
sqrt(mean((resid(fit_big))^2))
make_poly_data = function(sample_size = 11) {
x = seq(0,10)
y = 3 + x + 4 * x ^ 2 + rnorm(n = sample_size, mean = 0, sd = 5)
data.frame(x,y)
}
make_poly_data = function(sample_size = 11) {
x = seq(0,10)
y = 3 + x + 4 * x ^ 2 + rnorm(n = sample_size, mean = 0, sd = 20)
data.frame(x,y)
}
set.seed(1234)
poly_data = make_poly_data()
fit_lin = lm(y~x, data = poly_data)
fit_quad = lm(y~poly(x,2), data = poly_data)
fit_big = lm(y~poly(x,8),data = poly_data)
sqrt(mean((resid(fit_lin))^2))
sqrt(mean((resid(fit_quad))^2))
sqrt(mean((resid(fit_big))^2))
make_poly_data = function(sample_size = 11) {
x = seq(0,10)
y = 3 + x + 4 * x ^ 2 + rnorm(n = sample_size, mean = 0, sd = 5)
data.frame(x,y)
}
set.seed(1234)
poly_data = make_poly_data()
fit_lin = lm(y~x, data = poly_data)
fit_quad = lm(y~poly(x,2), data = poly_data)
fit_big = lm(y~poly(x,8),data = poly_data)
sqrt(mean((resid(fit_lin))^2))
sqrt(mean((resid(fit_quad))^2))
sqrt(mean((resid(fit_big))^2))
sqrt(mean((resid(fit_lin))^2))
sqrt(mean((resid(fit_quad))^2))
sqrt(mean((resid(fit_big))^2))
make_poly_data = function(sample_size = 11) {
x = seq(0,10)
y = 3 + x + 4 * x ^ 2 + rnorm(n = sample_size, mean = 0, sd = 20)
data.frame(x,y)
}
set.seed(1234)
poly_data = make_poly_data()
fit_lin = lm(y~x, data = poly_data)
fit_quad = lm(y~poly(x,2), data = poly_data)
fit_big = lm(y~poly(x,8),data = poly_data)
sqrt(mean((resid(fit_lin))^2))
sqrt(mean((resid(fit_quad))^2))
sqrt(mean((resid(fit_big))^2))
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(xplot), lwd = 1, col = "dodgerblue"))
predict(fit_quad,newdata = data.frame(xplot)
predict(fit_quad,newdata = data.frame(xplot))
xplot = seq(0,10,by=0.1)
xplot
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(xplot)), lwd = 1, col = "dodgerblue"))
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(xplot)), lwd = 1, col = "dodgerblue")
length(xplot)
predict(fit_quad,newdata = data.frame(xplot))
length(predict(fit_quad,newdata = data.frame(xplot)))
fit_quad
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 1, col = "dodgerblue")
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue")
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=plot)),lwd = 2, col = "darkorange",lty = 2)
predict(fit_big,newdata = data.frame(x=plot))
predict(fit_quad,newdata = data.frame(x=xplot))
predict(fit_big,newdata = data.frame(x=xplot))
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
legend("topleft", legend = c("Quadratic","Poly - Degree 8"), col = c("dodgerblue","darkorange"), lty = c(1,2))
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
legend("topleft", legend = c("Quadratic","Bigger - Degree 8"), col = c("dodgerblue","darkorange"), lty = c(1,2))
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
legend("topleft", legend = c("Quadratic","Bigger - Degree 8"), col = c("dodgerblue","darkorange"), lty = c(1,2))
make_poly_data = function(sample_size = 11) {
x = seq(0,10)
y = 3 + x + 4 * x ^ 2 + rnorm(n = sample_size, mean = 0, sd = 20)
data.frame(x,y)
}
set.seed(1234)
poly_data = make_poly_data()
fit_lin = lm(y ~ x, data = poly_data)
fit_quad = lm(y ~ poly(x,2), data = poly_data)
fit_big = lm(y ~ poly(x,8),data = poly_data)
sqrt(mean((resid(fit_lin))^2))
sqrt(mean((resid(fit_quad))^2))
sqrt(mean((resid(fit_big))^2))
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
legend("topleft", legend = c("Quadratic","Bigger - Degree 8"), col = c("dodgerblue","darkorange"), lty = c(1,2))
remove = 2 #This is the point which we believe not to be seen by the model
fit_quad_removed = lm(y ~ poly(x,2), data = poly_data[-remove,])
fit_big_removed = lm(y ~ poly(x,8), data = ploy_data[-remove,])
make_poly_data = function(sample_size = 11) {
x = seq(0,10)
y = 3 + x + 4 * x ^ 2 + rnorm(n = sample_size, mean = 0, sd = 20)
data.frame(x,y)
}
set.seed(1234)
poly_data = make_poly_data()
fit_lin = lm(y ~ x, data = poly_data)
fit_quad = lm(y ~ poly(x,2), data = poly_data)
fit_big = lm(y ~ poly(x,8),data = poly_data)
sqrt(mean((resid(fit_lin))^2))
sqrt(mean((resid(fit_quad))^2))
sqrt(mean((resid(fit_big))^2))
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, ylim = c(-100,400), pch = 20, cex = 2)
lines(xplot, predict(fit_quad,newdata = data.frame(x=xplot)), lwd = 2, col = "dodgerblue", lty = 1)
lines(xplot,predict(fit_big,newdata = data.frame(x=xplot)),lwd = 2, col = "darkorange",lty = 2)
legend("topleft", legend = c("Quadratic","Bigger - Degree 8"), col = c("dodgerblue","darkorange"), lty = c(1,2))
remove = 2 #This is the point which we believe not to be seen by the model
fit_quad_removed = lm(y ~ poly(x,2), data = poly_data[-remove,])
fit_big_removed = lm(y ~ poly(x,8), data = poly_data[-remove,])
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_plot, pch = 20, cex = 2, col = "dodgerblue")
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2, col = "dodgerblue")
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
plot(xplot, predict(fit_quad_removed), col = "dodgerblue", lwd = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
plot(xplot, predict(fit_quad_removed,newdata=data.frame(x = xplot)), col = "dodgerblue", lwd = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad_removed,newdata=data.frame(x = xplot)), col = "dodgerblue", lwd = 2)
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad_removed,newdata=data.frame(x = xplot)), col = "dodgerblue", lwd = 2)
lines(xplot, predict(fit_big_removed,newdata=data.frame(x = xplot)), col = "darkorange", lwd = 2)
remove = 1 #This is the point which we believe not to be seen by the model
fit_quad_removed = lm(y ~ poly(x,2), data = poly_data[-remove,])
fit_big_removed = lm(y ~ poly(x,8), data = poly_data[-remove,])
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad_removed,newdata=data.frame(x = xplot)), col = "dodgerblue", lwd = 2)
lines(xplot, predict(fit_big_removed,newdata=data.frame(x = xplot)), col = "darkorange", lwd = 2)
remove = 2 #This is the point which we believe not to be seen by the model
fit_quad_removed = lm(y ~ poly(x,2), data = poly_data[-remove,])
fit_big_removed = lm(y ~ poly(x,8), data = poly_data[-remove,])
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad_removed,newdata=data.frame(x = xplot)), col = "dodgerblue", lwd = 2)
lines(xplot, predict(fit_big_removed,newdata=data.frame(x = xplot)), col = "darkorange", lwd = 2)
remove = 4 #This is the point which we believe not to be seen by the model
fit_quad_removed = lm(y ~ poly(x,2), data = poly_data[-remove,])
fit_big_removed = lm(y ~ poly(x,8), data = poly_data[-remove,])
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad_removed,newdata=data.frame(x = xplot)), col = "dodgerblue", lwd = 2)
lines(xplot, predict(fit_big_removed,newdata=data.frame(x = xplot)), col = "darkorange", lwd = 2)
remove = 3 #This is the point which we believe not to be seen by the model
fit_quad_removed = lm(y ~ poly(x,2), data = poly_data[-remove,])
fit_big_removed = lm(y ~ poly(x,8), data = poly_data[-remove,])
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad_removed,newdata=data.frame(x = xplot)), col = "dodgerblue", lwd = 2)
lines(xplot, predict(fit_big_removed,newdata=data.frame(x = xplot)), col = "darkorange", lwd = 2)
remove = 2 #This is the point which we believe not to be seen by the model
fit_quad_removed = lm(y ~ poly(x,2), data = poly_data[-remove,])
fit_big_removed = lm(y ~ poly(x,8), data = poly_data[-remove,])
xplot = seq(0,10,by=0.1)
plot(y ~ x, data = poly_data, pch = 20, cex = 2)
lines(xplot, predict(fit_quad_removed,newdata=data.frame(x = xplot)), col = "dodgerblue", lwd = 2)
lines(xplot, predict(fit_big_removed,newdata=data.frame(x = xplot)), col = "darkorange", lwd = 2)
sqrt(mean((resid(fit_quad_fixed))^2))
sqrt(mean((resid(fit_quad_removed))^2))
sqrt(mean((resid(fit_big_removed))^2))
rmse_loocv(fit_lin)
rmse_loocv = function(model){
sqrt(mean((resid(model) / (1 - hatvalues(model)))^2))
}
rmse_loocv(fit_lin)
rmse_loocv(fit_quad)
rmse_loocv(fit_big)
rmse_loocv(fit_quad_removed)
rmse_loocv(fit_big_removed)
