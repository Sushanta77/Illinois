}
plot_qq = function(model, pointcol = "dodgerblue", linecol = "darkorange") {
qqnorm(resid(model), col = pointcol, pch = 20, cex = 1.5)
qqline(resid(model), col = linecol, lwd = 2)
}
plot_fitted_resid(model = null_model)
plot_qq(model = null_model)
library(ISLR)
data(Credit)
Credit = subset(Credit, select = -c(ID))
mod_a = lm(formula = Balance ~ Income + Limit + Student, data = Credit)
library(lmtest)
get_bp_decision = function(model, alpha) {
decide = unname(bptest(model)$p.value < alpha)
ifelse(decide, "Reject", "Fail to Reject")
}
get_sw_decision = function(model, alpha) {
decide = unname(shapiro.test(resid(model))$p.value < alpha)
ifelse(decide, "Reject", "Fail to Reject")
}
get_num_params = function(model) {
length(coef(model))
}
get_loocv_rmse = function(model) {
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
get_adj_r2 = function(model) {
summary(model)$adj.r.squared
}
#mod_a = lm(formula = Balance ~ Income + Limit + Student, data = Credit)
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
mod_b = lm(Balance ~ Income + Limit + Age +
Education + Student + Ethnicity + Income:Rating + Income:Cards + Income:Age + Income:Education +
Income:Gender + Income:Student + Income:Married + Income:Ethnicity +
Limit:Rating + Limit:Cards + Limit:Age + Limit:Education +
Limit:Married + Limit:Ethnicity + Rating:Age + Rating:Education + Rating:Gender +
Rating:Student +  Cards:Education + Cards:Student + Age:Student +
Age:Married + Age:Ethnicity + Education:Student +
Student:Married + Student:Ethnicity + Income:Limit:Gender + Income:Limit:Married + Income:Limit:Ethnicity +
Income:Rating:Cards + Income:Rating:Gender + Income:Rating:Student +
Income:Rating:Married + Income:Rating:Ethnicity + Income:Cards:Education +
Income:Cards:Gender + Income:Cards:Student + Income:Age:Student +
Income:Age:Married + Income:Education:Gender + Income:Education:Married +
Income:Gender:Married + Income:Gender:Ethnicity +
Limit:Rating:Age + Limit:Rating:Gender + Limit:Rating:Student +
Limit:Student:Ethnicity,
data = Credit)
library(lmtest)
get_bp_decision = function(model, alpha) {
decide = unname(bptest(model)$p.value < alpha)
ifelse(decide, "Reject", "Fail to Reject")
}
get_sw_decision = function(model, alpha) {
decide = unname(shapiro.test(resid(model))$p.value < alpha)
ifelse(decide, "Reject", "Fail to Reject")
}
get_num_params = function(model) {
length(coef(model))
}
get_loocv_rmse = function(model) {
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
get_adj_r2 = function(model) {
summary(model)$adj.r.squared
}
library(lattice)
library(caret)
library(ggplot2)
data(Sacramento)
sac_data = Sacramento
sac_data$limits = factor(ifelse(sac_data$city == "SACRAMENTO", "in", "out"))
sac_data = subset(sac_data, select = -c(city, zip))
qplot(y = longitude, x = latitude, data = sac_data,
col = limits, main = "Sacramento City Limits ")
set.seed(420)
sac_trn_idx  = sample(nrow(sac_data), size = trunc(0.80 * nrow(sac_data)))
sac_trn_data = sac_data[sac_trn_idx, ]
sac_tst_data = sac_data[-sac_trn_idx, ]
good_model = lm(price ~ beds + baths + sqft + type + latitude +
longitude + limits + beds:sqft + beds:longitude + baths:limits +
sqft:longitude + sqft:limits + type:latitude + latitude:longitude +
longitude:limits, data = sac_trn_data)
good_model
sqrt(mean((resid(good_model) / (1 - hatvalues(good_model)))^2))
sqrt(mean((resid(good_model) / (1 - hatvalues(good_model)))^2)) < 77500
predict_price = predict(good_model, newdata = sac_tst_data[,c("beds","baths","sqft","type","latitude","longitude","limits")])
average_percent_error = (mean(abs(predict_price - sac_tst_data$price) / predict_price)) * 100
average_percent_error
xplot = seq(0,10,by=0.1)
plot(predict_price~sac_tst_data$price, col = "dodgerblue", xlim=c(0,700000), ylim=c(0,700000),pch = 1, cex = 1, xlab = "Actual Price", ylab = "Predicted Price", main = "Actual Price Versus Predicted Price")
abline(a = 0, b = 1, col = "darkorange", lwd = 2)
beta_0  = 1
beta_1  = -1
beta_2  = 2
beta_3  = -2
beta_4  = 1
beta_5  = 1
beta_6  = 0
beta_7  = 0
beta_8  = 0
beta_9  = 0
beta_10 = 0
sigma = 2
not_sig  = c("x_6", "x_7", "x_8", "x_9", "x_10")
signif = c("x_1", "x_2", "x_3", "x_4", "x_5")
set.seed(420)
n = 100
x_1  = runif(n, 0, 10)
x_2  = runif(n, 0, 10)
x_3  = runif(n, 0, 10)
x_4  = runif(n, 0, 10)
x_5  = runif(n, 0, 10)
x_6  = runif(n, 0, 10)
x_7  = runif(n, 0, 10)
x_8  = runif(n, 0, 10)
x_9  = runif(n, 0, 10)
x_10 = runif(n, 0, 10)
sim_data_1 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
head(sim_data_1)
fit = lm(y ~ x_1 + x_2 + x_6 + x_7, data = sim_data_1)
coef(fit)
# which are false negatives?
!(signif %in% names(coef(fit)))
# which are false positives?
names(coef(fit)) %in% not_sig
library(knitr)
birthday = 19770411
set.seed(birthday)
num_sim = 300
mod1_false_negative_aic = 0
mod1_false_postive_aic = 0
mod1_false_negative_bic = 0
mod1_false_postive_bic = 0
mod1_rate_false_negative_aic = 0
mod1_rate_false_postive_aic = 0
mod1_rate_false_negative_bic = 0
mod1_rate_false_postive_bic = 0
for(i in 1:num_sim){
sim_data_1 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
mod1_fit_add = lm(y ~ ., data = sim_data_1)
mod1_fit_add_aic_back = step(mod1_fit_add, direction = "backward",trace=0)
mod1_false_negative_aic = mod1_false_negative_aic + sum(!(signif %in% names(coef(mod1_fit_add_aic_back)))) # which are false negatives?
mod1_false_postive_aic = mod1_false_postive_aic + sum(names(coef(mod1_fit_add_aic_back)) %in% not_sig) # which are false positives?
mod1_fit_add_bic_back = step(mod1_fit_add, direction = "backward", k = log(n),trace=0)
mod1_false_negative_bic = mod1_false_negative_bic + sum(!(signif %in% names(coef(mod1_fit_add_bic_back)))) # which are false negatives?
mod1_false_postive_bic = mod1_false_postive_bic + sum(names(coef(mod1_fit_add_bic_back)) %in% not_sig) # which are false positives?
}
mod1_rate_false_negative_aic = mod1_false_negative_aic / num_sim
mod1_rate_false_postive_aic = mod1_false_postive_aic / num_sim
mod1_rate_false_negative_bic = mod1_false_negative_bic / num_sim
mod1_rate_false_postive_bic = mod1_false_postive_bic / num_sim
set.seed(420)
x_1  = runif(n, 0, 10)
x_2  = runif(n, 0, 10)
x_3  = runif(n, 0, 10)
x_4  = runif(n, 0, 10)
x_5  = runif(n, 0, 10)
x_6  = runif(n, 0, 10)
x_7  = runif(n, 0, 10)
x_8  = x_1 + rnorm(n, 0, 0.1)
x_9  = x_1 + rnorm(n, 0, 0.1)
x_10 = x_2 + rnorm(n, 0, 0.1)
sim_data_2 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
library(knitr)
birthday = 19770411
set.seed(birthday)
num_sim = 300
mod2_false_negative_aic = 0
mod2_false_postive_aic = 0
mod2_false_negative_bic = 0
mod2_false_postive_bic = 0
mod2_rate_false_negative_aic = 0
mod2_rate_false_postive_aic = 0
mod2_rate_false_negative_bic = 0
mod2_rate_false_postive_bic = 0
for(i in 1:num_sim){
sim_data_2 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
mod2_fit_add = lm(y ~ ., data = sim_data_2)
mod2_fit_add_aic_back = step(mod2_fit_add, direction = "backward",trace=0)
mod2_false_negative_aic = mod2_false_negative_aic + sum(!(signif %in% names(coef(mod2_fit_add_aic_back)))) # which are false negatives?
mod2_false_postive_aic = mod2_false_postive_aic + sum(names(coef(mod2_fit_add_aic_back)) %in% not_sig) # which are false positives?
mod2_fit_add_bic_back = step(mod2_fit_add, direction = "backward", k = log(n),trace=0)
mod2_false_negative_bic = mod2_false_negative_bic + sum(!(signif %in% names(coef(mod2_fit_add_bic_back)))) # which are false negatives?
mod2_false_postive_bic = mod2_false_postive_bic + sum(names(coef(mod2_fit_add_bic_back)) %in% not_sig) # which are false positives?
}
mod2_rate_false_negative_aic = mod2_false_negative_aic / num_sim
mod2_rate_false_postive_aic = mod2_false_postive_aic / num_sim
mod2_rate_false_negative_bic = mod2_false_negative_bic / num_sim
mod2_rate_false_postive_bic = mod2_false_postive_bic / num_sim
compare_aic_bic = data.frame(
Attribute = c("AIC","BIC"),
Model_1_FN = c(mod1_rate_false_negative_aic,mod1_rate_false_negative_bic),
Model_2_FN = c(mod2_rate_false_negative_aic,mod2_rate_false_negative_bic),
Model_1_FP = c(mod1_rate_false_postive_aic,mod1_rate_false_postive_bic),
Model_2_FP = c(mod2_rate_false_postive_aic,mod2_rate_false_postive_bic)
)
kable(compare_aic_bic, format = "pandoc",padding = 2,caption = "Compare AIC BIC against False Positive (FP), False negative(FN)")
library(knitr)
birthday = 19770411
set.seed(birthday)
num_sim = 300
mod1_false_negative_aic = 0
mod1_false_postive_aic = 0
mod1_false_negative_bic = 0
mod1_false_postive_bic = 0
mod1_rate_false_negative_aic = 0
mod1_rate_false_postive_aic = 0
mod1_rate_false_negative_bic = 0
mod1_rate_false_postive_bic = 0
fp_aic = rep(0,num_sims)
library(knitr)
birthday = 19770411
set.seed(birthday)
num_sim = 300
num_sims = 300
mod1_false_negative_aic = 0
mod1_false_postive_aic = 0
mod1_false_negative_bic = 0
mod1_false_postive_bic = 0
mod1_rate_false_negative_aic = 0
mod1_rate_false_postive_aic = 0
mod1_rate_false_negative_bic = 0
mod1_rate_false_postive_bic = 0
fp_aic = rep(0,num_sims)
fn_aic = rep(0,num_sims)
fp_bic = rep(0,num_sims)
fn_bic = rep(0,num_sims)
for(i in 1:num_sim){
#sim_data_1 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
#y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
#    beta_5 * x_5 + rnorm(n, 0 , sigma)
#)
sim_data_1$y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 +
beta_4 * x_4 + beta_5 * x_5 + rnorm(n, 0 , sigma)
#mod1_fit_add = lm(y ~ ., data = sim_data_1)
fit = lm (y ~ ., data = sim_data_1)
fit_back_aic = step(fit, direction = "backward",trace=0)
fit_back_bic = step(fit, direction = "backward",trace=0, k = log(nrow(sim_data_1)))
fn_aic[i] = sum(!(signif %in% names(coef(fit_back_aic))))
fp_aic[i] = sum(names(coef(fit_back_aic)) %in% not_sig)
fn_bic[i] = sum(!(signif %in% names(coef(fit_back_bic))))
fp_bic[i] = sum(names(coef(fit_back_bic)) %in% not_sig)
mod1_fit_add_aic_back = step(mod1_fit_add, direction = "backward",trace=0)
mod1_false_negative_aic = mod1_false_negative_aic + sum(!(signif %in% names(coef(mod1_fit_add_aic_back)))) # which are false negatives?
mod1_false_postive_aic = mod1_false_postive_aic + sum(names(coef(mod1_fit_add_aic_back)) %in% not_sig) # which are false positives?
mod1_fit_add_bic_back = step(mod1_fit_add, direction = "backward", k = log(n),trace=0)
mod1_false_negative_bic = mod1_false_negative_bic + sum(!(signif %in% names(coef(mod1_fit_add_bic_back)))) # which are false negatives?
mod1_false_postive_bic = mod1_false_postive_bic + sum(names(coef(mod1_fit_add_bic_back)) %in% not_sig) # which are false positives?
}
results = data.frame (
FP = c(mean(fp_aic), mean(fp_bic)),
FN = c(mean(fn_aic), mean(fn_bic))
)
mod1_rate_false_negative_aic = mod1_false_negative_aic / num_sim
mod1_rate_false_postive_aic = mod1_false_postive_aic / num_sim
mod1_rate_false_negative_bic = mod1_false_negative_bic / num_sim
mod1_rate_false_postive_bic = mod1_false_postive_bic / num_sim
results
library(knitr)
birthday = 19770411
set.seed(birthday)
num_sims = 300
fp_aic = rep(0,num_sims)
fn_aic = rep(0,num_sims)
fp_bic = rep(0,num_sims)
fn_bic = rep(0,num_sims)
for(i in 1:num_sim){
sim_data_2$y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 +
beta_4 * x_4 + beta_5 * x_5 + rnorm(n, 0 , sigma)
fit = lm (y ~ ., data = sim_data_2)
fit_back_aic = step(fit, direction = "backward",trace=0)
fit_back_bic = step(fit, direction = "backward",trace=0, k = log(nrow(sim_data_1)))
fn_aic[i] = sum(!(signif %in% names(coef(fit_back_aic))))
fp_aic[i] = sum(names(coef(fit_back_aic)) %in% not_sig)
fn_bic[i] = sum(!(signif %in% names(coef(fit_back_bic))))
fp_bic[i] = sum(names(coef(fit_back_bic)) %in% not_sig)
}
results = data.frame (
FP = c(mean(fp_aic), mean(fp_bic)),
FN = c(mean(fn_aic), mean(fn_bic))
)
results
library(knitr)
birthday = 19770411
set.seed(birthday)
num_sims = 300
fp_aic = rep(0,num_sims)
fn_aic = rep(0,num_sims)
fp_bic = rep(0,num_sims)
fn_bic = rep(0,num_sims)
for(i in 1:num_sim){
sim_data_1$y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 +
beta_4 * x_4 + beta_5 * x_5 + rnorm(n, 0 , sigma)
fit = lm (y ~ ., data = sim_data_1)
fit_back_aic = step(fit, direction = "backward",trace=0)
fit_back_bic = step(fit, direction = "backward",trace=0, k = log(nrow(sim_data_1)))
fn_aic[i] = sum(!(signif %in% names(coef(fit_back_aic))))
fp_aic[i] = sum(names(coef(fit_back_aic)) %in% not_sig)
fn_bic[i] = sum(!(signif %in% names(coef(fit_back_bic))))
fp_bic[i] = sum(names(coef(fit_back_bic)) %in% not_sig)
}
results = data.frame (
FP = c(mean(fp_aic), mean(fp_bic)),
FN = c(mean(fn_aic), mean(fn_bic))
)
results
library(knitr)
birthday = 420
set.seed(birthday)
num_sims = 300
fp_aic = rep(0,num_sims)
fn_aic = rep(0,num_sims)
fp_bic = rep(0,num_sims)
fn_bic = rep(0,num_sims)
for(i in 1:num_sim){
sim_data_1$y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 +
beta_4 * x_4 + beta_5 * x_5 + rnorm(n, 0 , sigma)
fit = lm (y ~ ., data = sim_data_1)
fit_back_aic = step(fit, direction = "backward",trace=0)
fit_back_bic = step(fit, direction = "backward",trace=0, k = log(nrow(sim_data_1)))
fn_aic[i] = sum(!(signif %in% names(coef(fit_back_aic))))
fp_aic[i] = sum(names(coef(fit_back_aic)) %in% not_sig)
fn_bic[i] = sum(!(signif %in% names(coef(fit_back_bic))))
fp_bic[i] = sum(names(coef(fit_back_bic)) %in% not_sig)
}
results = data.frame (
FP = c(mean(fp_aic), mean(fp_bic)),
FN = c(mean(fn_aic), mean(fn_bic))
)
results
library(knitr)
birthday = 19770411
set.seed(birthday)
num_sim = 300
mod1_false_negative_aic = 0
mod1_false_postive_aic = 0
mod1_false_negative_bic = 0
mod1_false_postive_bic = 0
fp_aic = rep(0,num_sims)
fn_aic = rep(0,num_sims)
fp_bic = rep(0,num_sims)
fn_bic = rep(0,num_sims)
for(i in 1:num_sim){
sim_data_1 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
mod1_fit_add = lm(y ~ ., data = sim_data_1)
mod1_fit_add_aic_back = step(mod1_fit_add, direction = "backward",trace=0)
mod1_false_negative_aic = mod1_false_negative_aic + sum(!(signif %in% names(coef(mod1_fit_add_aic_back)))) # which are false negatives?
mod1_false_postive_aic = mod1_false_postive_aic + sum(names(coef(mod1_fit_add_aic_back)) %in% not_sig) # which are false positives?
mod1_fit_add_bic_back = step(mod1_fit_add, direction = "backward", k = log(n),trace=0)
mod1_false_negative_bic = mod1_false_negative_bic + sum(!(signif %in% names(coef(mod1_fit_add_bic_back)))) # which are false negatives?
mod1_false_postive_bic = mod1_false_postive_bic + sum(names(coef(mod1_fit_add_bic_back)) %in% not_sig) # which are false positives?
}
#mod1_rate_false_negative_aic = 0
#mod1_rate_false_postive_aic = 0
#mod1_rate_false_negative_bic = 0
#mod1_rate_false_postive_bic = 0
mod1_rate_false_negative_aic = mod1_false_negative_aic / num_sim
mod1_rate_false_postive_aic = mod1_false_postive_aic / num_sim
mod1_rate_false_negative_bic = mod1_false_negative_bic / num_sim
mod1_rate_false_postive_bic = mod1_false_postive_bic / num_sim
mod1_rate_false_negative_aic
mod1_rate_false_postive_aic
mod1_rate_false_negative_bic
mod1_rate_false_postive_bic
results = data.frame(
FN = c(mod1_rate_false_negative_aic,mod1_rate_false_negative_bic)
FP = c(mod1_rate_false_postive_aic,mod1_rate_false_postive_bic)
)
results = data.frame(
FN = c(mod1_rate_false_negative_aic,mod1_rate_false_negative_bic),
FP = c(mod1_rate_false_postive_aic,mod1_rate_false_postive_bic)
)
results
rownames(results) = c("AIC", "BIC")
results
mod1_rate_false_negative_aic = mod1_false_negative_aic / num_sim
mod1_rate_false_postive_aic = mod1_false_postive_aic / num_sim
mod1_rate_false_negative_bic = mod1_false_negative_bic / num_sim
mod1_rate_false_postive_bic = mod1_false_postive_bic / num_sim
results = data.frame(
FN = c(mod1_rate_false_negative_aic,mod1_rate_false_negative_bic),
FP = c(mod1_rate_false_postive_aic,mod1_rate_false_postive_bic)
)
results
mod1_rate_false_negative_aic = mod1_false_negative_aic / num_sim
mod1_rate_false_postive_aic = mod1_false_postive_aic / num_sim
mod1_rate_false_negative_bic = mod1_false_negative_bic / num_sim
mod1_rate_false_postive_bic = mod1_false_postive_bic / num_sim
results = data.frame(
FN = c(mod1_rate_false_negative_aic,mod1_rate_false_negative_bic),
FP = c(mod1_rate_false_postive_aic,mod1_rate_false_postive_bic)
)
rownames(results) = c("AIC", "BIC")
results
kable(results, format = "pandoc",padding = 2,caption = "Compare AIC BIC against False Positive (FP), False negative(FN)")
library(knitr)
birthday = 19770411
set.seed(birthday)
num_sim = 300
mod1_false_negative_aic = 0
mod1_false_postive_aic = 0
mod1_false_negative_bic = 0
mod1_false_postive_bic = 0
for(i in 1:num_sim){
sim_data_1 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
mod1_fit_add = lm(y ~ ., data = sim_data_1)
mod1_fit_add_aic_back = step(mod1_fit_add, direction = "backward",trace=0)
mod1_false_negative_aic = mod1_false_negative_aic + sum(!(signif %in% names(coef(mod1_fit_add_aic_back)))) # which are false negatives?
mod1_false_postive_aic = mod1_false_postive_aic + sum(names(coef(mod1_fit_add_aic_back)) %in% not_sig) # which are false positives?
mod1_fit_add_bic_back = step(mod1_fit_add, direction = "backward", k = log(n),trace=0)
mod1_false_negative_bic = mod1_false_negative_bic + sum(!(signif %in% names(coef(mod1_fit_add_bic_back)))) # which are false negatives?
mod1_false_postive_bic = mod1_false_postive_bic + sum(names(coef(mod1_fit_add_bic_back)) %in% not_sig) # which are false positives?
}
mod1_rate_false_negative_aic = mod1_false_negative_aic / num_sim
mod1_rate_false_postive_aic = mod1_false_postive_aic / num_sim
mod1_rate_false_negative_bic = mod1_false_negative_bic / num_sim
mod1_rate_false_postive_bic = mod1_false_postive_bic / num_sim
results = data.frame(
FN = c(mod1_rate_false_negative_aic,mod1_rate_false_negative_bic),
FP = c(mod1_rate_false_postive_aic,mod1_rate_false_postive_bic)
)
rownames(results) = c("AIC", "BIC")
results
library(knitr)
birthday = 19770411
set.seed(birthday)
num_sim = 300
mod1_false_negative_aic = 0
mod1_false_postive_aic = 0
mod1_false_negative_bic = 0
mod1_false_postive_bic = 0
for(i in 1:num_sim){
sim_data_1 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
mod1_fit_add = lm(y ~ ., data = sim_data_1)
mod1_fit_add_aic_back = step(mod1_fit_add, direction = "backward",trace=0)
mod1_false_negative_aic = mod1_false_negative_aic + sum(!(signif %in% names(coef(mod1_fit_add_aic_back)))) # which are false negatives?
mod1_false_postive_aic = mod1_false_postive_aic + sum(names(coef(mod1_fit_add_aic_back)) %in% not_sig) # which are false positives?
mod1_fit_add_bic_back = step(mod1_fit_add, direction = "backward", k = log(n),trace=0)
mod1_false_negative_bic = mod1_false_negative_bic + sum(!(signif %in% names(coef(mod1_fit_add_bic_back)))) # which are false negatives?
mod1_false_postive_bic = mod1_false_postive_bic + sum(names(coef(mod1_fit_add_bic_back)) %in% not_sig) # which are false positives?
}
mod1_rate_false_negative_aic = mod1_false_negative_aic / num_sim
mod1_rate_false_postive_aic = mod1_false_postive_aic / num_sim
mod1_rate_false_negative_bic = mod1_false_negative_bic / num_sim
mod1_rate_false_postive_bic = mod1_false_postive_bic / num_sim
mod1_results = data.frame(
FN = c(mod1_rate_false_negative_aic,mod1_rate_false_negative_bic),
FP = c(mod1_rate_false_postive_aic,mod1_rate_false_postive_bic)
)
rownames(mod1_results) = c("AIC", "BIC")
mod1_results
kable(mod1_results, format = "pandoc",padding = 2,caption = "Compare AIC BIC against False Positive (FP), False negative(FN)")
library(knitr)
birthday = 19770411
set.seed(birthday)
num_sim = 300
mod2_false_negative_aic = 0
mod2_false_postive_aic = 0
mod2_false_negative_bic = 0
mod2_false_postive_bic = 0
for(i in 1:num_sim){
sim_data_2 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
mod2_fit_add = lm(y ~ ., data = sim_data_2)
mod2_fit_add_aic_back = step(mod2_fit_add, direction = "backward",trace=0)
mod2_false_negative_aic = mod2_false_negative_aic + sum(!(signif %in% names(coef(mod2_fit_add_aic_back)))) # which are false negatives?
mod2_false_postive_aic = mod2_false_postive_aic + sum(names(coef(mod2_fit_add_aic_back)) %in% not_sig) # which are false positives?
mod2_fit_add_bic_back = step(mod2_fit_add, direction = "backward", k = log(n),trace=0)
mod2_false_negative_bic = mod2_false_negative_bic + sum(!(signif %in% names(coef(mod2_fit_add_bic_back)))) # which are false negatives?
mod2_false_postive_bic = mod2_false_postive_bic + sum(names(coef(mod2_fit_add_bic_back)) %in% not_sig) # which are false positives?
}
mod2_rate_false_negative_aic = mod2_false_negative_aic / num_sim
mod2_rate_false_postive_aic = mod2_false_postive_aic / num_sim
mod2_rate_false_negative_bic = mod2_false_negative_bic / num_sim
mod2_rate_false_postive_bic = mod2_false_postive_bic / num_sim
mod2_results = data.frame(
FN = c(mod2_rate_false_negative_aic,mod2_rate_false_negative_bic),
FP = c(mod2_rate_false_postive_aic,mod2_rate_false_postive_bic)
)
rownames(mod2_results) = c("AIC", "BIC")
mod2_results
kable(mod2_results, format = "pandoc",padding = 2,caption = "Model 2 Compare AIC BIC against False Positive (FP), False negative(FN)")
kable(mod1_results, mod2_results, format = "pandoc",padding = 2,caption = "Compare AIC BIC against False Positive (FP), False negative(FN)")
mod1_results
mod2_results
mod1_results
