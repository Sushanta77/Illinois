#Now, let's plot Q-Q plot
qqnorm(resid(initech_fit),col = "darkgrey",pch = 1, cex = 1)
qqline(resid(initech_fit),col = "dodgerblue",lwd = 2, lty = 2)
#Now, let's model this
initech_fit_log = lm(log(salary)~years,data = initech)
plot(log(salary)~years,data = initech,col = "darkgrey", pch = 20, cex = 2)
abline(initech_fit_log, col = "darkorange", lwd = 2, lty = 2)
#Now, let's model this
initech_fit_log = lm(log(salary)~years,data = initech)
plot(log(salary)~years,data = initech,col = "darkgrey", pch = 20, cex = 1)
abline(initech_fit_log, col = "darkorange", lwd = 2, lty = 2)
par(mfrow=c(1,2))
#Plot the Scatter Plot and the fitted the line
plot(salary~years,data=initech,col = "darkgrey",pch = 20, cex = 1)
abline(initech_fit,col = "darkorange", lwd = 2)
#Now, let's model the log(salary)
initech_fit_log = lm(log(salary)~years,data = initech)
plot(log(salary)~years,data = initech,col = "darkgrey", pch = 20, cex = 1)
abline(initech_fit_log, col = "darkorange", lwd = 2, lty = 2)
par(mfrow=c(1,2))
#Plot the Scatter Plot and the fitted the line
plot(salary~years,data=initech,col = "darkgrey",pch = 20, cex = 1)
abline(initech_fit,col = "darkorange", lwd = 2)
#Now, let's model the log(salary)
initech_fit_log = lm(log(salary)~years,data = initech)
plot(log(salary)~years,data = initech,col = "darkgrey", pch = 20, cex = 1)
abline(initech_fit_log, col = "darkorange", lwd = 2, lty = 2)
par(mfrow=c(1,2))
#Plot the Scatter Plot and the fitted the line
plot(salary~years,data=initech,col = "darkgrey",pch = 20, cex = 1)
abline(initech_fit,col = "darkorange", lwd = 2, lty = 2)
#Now, let's model the log(salary)
initech_fit_log = lm(log(salary)~years,data = initech)
plot(log(salary)~years,data = initech,col = "darkgrey", pch = 20, cex = 1)
abline(initech_fit_log, col = "darkorange", lwd = 2, lty = 2)
plot(fitted(initech_fit_log),resid(initech_fit_log),col = "darkgrey", pch = 20, cex = 2)
abline ( h = 0, col = "darkorange", lwd = 2, lty = 2)
plot(fitted(initech_fit_log),resid(initech_fit_log),col = "darkgrey", pch = 20, cex = 1)
abline ( h = 0, col = "darkorange", lwd = 2, lty = 2)
par(mfrow = c(1,2))
plot(fitted(initech_fit_log),resid(initech_fit_log),col = "darkgrey", pch = 20, cex = 1, xlab = "Fitted Values", ylab = "Residuals")
abline ( h = 0, col = "darkorange", lwd = 2, lty = 2)
qqnorm(resid(initech_fit_log), col = "darkgrey", pch = 20, cex = 1)
qqline(resid(initech_fit_log),lwd = 2, col = "darkorange",lty = 2)
par(mfrow = c(1,2))
plot(fitted(initech_fit_log),resid(initech_fit_log),col = "darkgrey", pch = 20, cex = 1, xlab = "Fitted Values", ylab = "Residuals")
abline ( h = 0, col = "darkorange", lwd = 2, lty = 2)
qqnorm(resid(initech_fit_log), col = "darkgrey", pch = 20, cex = 1)
qqline(resid(initech_fit_log),lwd = 2, col = "darkorange",lty = 2)
par(mfrow = c(1,2))
#Now, let's plot Q-Q plot (Without Transformation)
plot(fitted(initech_fit_log),resid(initech_fit_log),col = "darkgrey", pch = 20, cex = 1, xlab = "Fitted Values", ylab = "Residuals")
abline ( h = 0, col = "darkorange", lwd = 2, lty = 2)
#Now, let's plot Q-Q plot (With Transformation - Log Transformation)
plot(fitted(initech_fit),resid(initech_fit),col = "darkgrey", pch = 20, cex = 1, xlab = "Fitted Values", ylab = "Residuals", main = "Fitted Values Vs Residuals of Initech")
abline(h = 0, col = "darkorange", lwd = 2, lty = 2)
par(mfrow = c(1,2))
#Now, let's plot Q-Q plot (With Transformation - Log Transformation)
plot(fitted(initech_fit),resid(initech_fit),col = "darkgrey", pch = 20, cex = 1, xlab = "Fitted Values", ylab = "Residuals", main = "Fitted Values Vs Residuals of Initech")
abline(h = 0, col = "darkorange", lwd = 2, lty = 2)
#Now, let's plot Q-Q plot (Without Transformation)
plot(fitted(initech_fit_log),resid(initech_fit_log),col = "darkgrey", pch = 20, cex = 1, xlab = "Fitted Values", ylab = "Residuals", main = "Fitted Values Vs Residuals of Initech (Log Transformation of Response)")
abline ( h = 0, col = "darkorange", lwd = 2, lty = 2)
paste("Breusch Pagan Test(Without Trasnformation)",`r bptest(initech_fit)`)
bptest(initech_fit)
bptest(initech_fit_log)
saphiro.test(resid(initech_fit))
shapiro.test(resid(initech_fit))
shapiro.test(resid(initech_fit))
shapiro.test(resid(initech_fit))
plot(salary~years,data=initech,col = "darkgrey",pch = 20,cex = 1,main = "Salaries at Initech, By Seniority")
plot(salary~years,data=initech,col = "darkgrey", pch = 20, cex = 1, main = "Years Vs Number of Years of Experience - Initech")
initech_fit
initech_fit_log
plot(salary~years,data=initech,col = "darkgrey", pch = 20, cex = 1, main = "Years Vs Number of Years of Experience - Initech")
curve(exp(initech_fit$coef[1]+initech_fit$coef[2] * x))
plot(salary~years,data=initech,col = "darkgrey", pch = 20, cex = 1, main = "Years Vs Number of Years of Experience - Initech")
curve(exp(initech_fit$coef[1]+initech_fit$coef[2] * x, from = 0 , to = 30))
exp(initech_fit$coef[1]
exp(initech_fit$coef[1])
plot(salary~years,data=initech,col = "darkgrey", pch = 20, cex = 1, main = "Years Vs Number of Years of Experience - Initech")
curve(exp(initech_fit_log$coef[1]+initech_fit_log$coef[2] * x, from = 0 , to = 30))
exp(initech_fit_log$coef[1]+initech_fit_log$coef[2] * x)
plot(salary~years,data=initech,col = "darkgrey", pch = 20, cex = 1, main = "Years Vs Number of Years of Experience - Initech")
curve(exp(initech_fit_log$coef[1]+initech_fit_log$coef[2] * x), from = 0 , to = 30)
plot(salary~years,data=initech,col = "darkgrey", pch = 20, cex = 1, main = "Years Vs Number of Years of Experience - Initech")
curve(exp(initech_fit_log$coef[1]+initech_fit_log$coef[2] * x), from = 0 , to = 30,add = True)
plot(salary~years,data=initech,col = "darkgrey", pch = 20, cex = 1, main = "Years Vs Number of Years of Experience - Initech")
curve(exp(initech_fit_log$coef[1]+initech_fit_log$coef[2] * x), from = 0 , to = 30,add = TRUE)
plot(salary~years,data=initech,col = "darkgrey", pch = 20, cex = 1, main = "Years Vs Number of Years of Experience - Initech")
curve(exp(initech_fit_log$coef[1]+initech_fit_log$coef[2] * x), from = 0 , to = 30,add = TRUE,col = "dodgerblue",lwd = 2, lty =2)
plot(salary~years,data=initech,col = "darkgrey", pch = 20, cex = 1, main = "Years Vs Number of Years of Experience - Initech")
curve(exp(initech_fit_log$coef[1]+initech_fit_log$coef[2] * x), from = 0 , to = 30,add = TRUE,col = "dodgerblue",lwd = 2, lty =2)
par(mfrow = c(1,2))
#Now, let's plot Q-Q plot (Without Transformation)
qqnorm(resid(initech_fit),col = "darkgrey",pch = 1, cex = 1)
qqline(resid(initech_fit),col = "dodgerblue",lwd = 2, lty = 2)
#Now, let's plot Q-Q plot (With Transformation - Log Transformation)
qqnorm(resid(initech_fit_log), col = "darkgrey", pch = 20, cex = 1)
qqline(resid(initech_fit_log),lwd = 2, col = "darkorange",lty = 2)
resid(initech_fit)
sqrt(resid(initech_fit)^2)
mean(resid(initech_fit)^2)
sqrt(mean(resid(initech_fit)^2))
#Now let's check the RMSE, which one is better, Normal vs Logarathimic Transformation
sqrt(mean(resid(initech_fit)^2))
sqrt(mean(resid(initech_fit_log)^2))
#Now let's check the RMSE, which one is better, Normal vs Logarathimic Transformation
sqrt(mean(resid(initech_fit)^2))
sqrt(mean(resid(initech_fit_log)^2))
sqrt(sum((initech$salary - fitted(initech_fit))^2))
sqrt(sum((initech$salary - fitted(initech_fit))^2))
sqrt(sum((initech$salary - exp(fitted(initech_fit)))^2))
sqrt(sum((initech$salary - fitted(initech_fit))^2))
sqrt(sum((initech$salary - exp(fitted(initech_fit_log)))^2))
x = runif(n = samples_size) * 5
x
samples_size = 500
x = runif(n = samples_size) * 5
x
length(x)
runif(n = samples_size)
runif(n = samples_size) * 5
sim_quad = function(samples_size = 500){
x = runif(n = samples_size) * 5
y = 3 + 5 * x ^2 + rnorm(samples_size, mean = 0, sd = 5)
data.frame(x,y)
}
quad_data = sim_quad()
lin_fit = lm(y~x,data=quad_data)
summary(lin_fit)
plot(y~x,data=quad_fit,col = "darkgrey",pch = 2, cex = 1)
plot(y~x,data=quad_fit,col = "darkgrey",pch = 2, cex = 1)
plot(y~x,data=quad_data,col = "darkgrey",pch = 2, cex = 1)
abline(lin_fit,lwd = 2, col = "darkorange", lty = 2)
plot(y~x,data=quad_data,col = "darkgrey",pch = 20, cex = 1)
abline(lin_fit,lwd = 2, col = "darkorange", lty = 2)
plot(y~x,data=quad_data,col = "darkgrey",pch = 1, cex = 1)
abline(lin_fit,lwd = 2, col = "darkorange", lty = 2)
set.seed(314)
quad_data = sim_quad()
head(quad_data)
0.4942^2
3 + 5 * x ^2
x
0.4942
0.4942^2
5 * 0.4942^2
3 + 5 * 0.4942^2
0.494
0.494^2
(0.494^2)
5 * (0.494^2)
3 + 5 * (0.494^2)
sim_quad = function(samples_size = 500){
x = runif(n = samples_size) * 5
y = 3 + 5 * x ^2 + rnorm(samples_size, mean = 0, sd = 5)
data.frame(x,y)
}
set.seed(314)
quad_data = sim_quad(sample_size = 200)
sim_quad = function(samples_size = 500){
x = runif(n = samples_size) * 5
y = 3 + 5 * x ^2 + rnorm(samples_size, mean = 0, sd = 5)
data.frame(x,y)
}
set.seed(314)
quad_data = sim_quad(sample_size = 200)
sim_quad = function(samples_size = 500){
x = runif(n = samples_size) * 5
y = 3 + 5 * x ^2 + rnorm(samples_size, mean = 0, sd = 5)
data.frame(x,y)
}
set.seed(314)
quad_data = sim_quad(samples_size = 200)
head(quad_data)
lin_fit = lm(y~x,data=quad_data)
summary(lin_fit)
plot(y~x,data=quad_data,col = "darkgrey",pch = 1, cex = 1)
abline(lin_fit,lwd = 2, col = "darkorange", lty = 2)
plot(y~x,data=quad_data,col = "darkgrey",pch = 1, cex = 1,main = "simulated quadratic data")
abline(lin_fit,lwd = 2, col = "darkorange", lty = 2)
plot(y~x,data=quad_data,col = "darkgrey",pch = 1, cex = 1,main = "Simulated Quadratic Data")
abline(lin_fit,lwd = 2, col = "darkorange", lty = 2)
plot(fitted(lin_fit),resid(lin_fit),col = "darkgrey", pch = 1, cex = 2, main = "Fitted Vs Residual - Linear Fit")
abline (h = 0, col = "darkorange", lwd = 2, lty =2)
plot(fitted(lin_fit),resid(lin_fit),col = "darkgrey", pch = 1, cex = 1, main = "Fitted Vs Residual - Linear Fit")
abline (h = 0, col = "darkorange", lwd = 2, lty =2)
par(mfrow = c(1,2))
#Let's see the Plot between Fitted Values Vs Residual Plots
plot(fitted(lin_fit),resid(lin_fit),col = "darkgrey", pch = 1, cex = 1, main = "Fitted Vs Residual - Linear Fit")
abline (h = 0, col = "darkorange", lwd = 2, lty =2)
qqnorm(resid(lin_fit),pch = 1, cex = 1, col = "darkgrey", main = "Fitted Vs Residual - Linear Fit")
qqline(resid(lin_fit),lwd = 2, col = "darkorange",lty = 2)
par(mfrow = c(1,2))
#Let's see the Plot between Fitted Values Vs Residual Plots
plot(fitted(lin_fit),resid(lin_fit),col = "darkgrey", pch = 1, cex = 1, main = "Fitted Vs Residual - Linear Fit")
abline (h = 0, col = "darkorange", lwd = 2, lty =2)
qqnorm(resid(lin_fit),pch = 1, cex = 1, col = "darkgrey", main = "Fitted Vs Residual - Linear Fit")
qqline(resid(lin_fit),lwd = 2, col = "darkorange",lty = 2)
par(mfrow = c(1,2))
#Let's see the Plot between Fitted Values Vs Residual Plots
plot(fitted(lin_fit),resid(lin_fit),col = "darkgrey", pch = 1, cex = 1, main = "Fitted Vs Residual - Linear Fit")
abline (h = 0, col = "darkorange", lwd = 2, lty =2)
qqnorm(resid(lin_fit),pch = 1, cex = 1, col = "darkgrey", main = "Fitted Vs Residual - Linear Fit")
qqline(resid(lin_fit),lwd = 2, col = "darkorange",lty = 2)
par(mfrow = c(1,2))
#Let's see the Plot between Fitted Values Vs Residual Plots
plot(fitted(lin_fit),resid(lin_fit),col = "darkgrey", pch = 1, cex = 1, main = "Fitted Vs Residual - Linear Fit")
abline (h = 0, col = "darkorange", lwd = 2, lty =2)
qqnorm(resid(lin_fit),pch = 1, cex = 1, col = "darkgrey", main = "Fitted Vs Residual - Linear Fit")
qqline(resid(lin_fit),lwd = 2, col = "darkorange",lty = 2)
#Let's fit a quadratic model
quad_fit = lm(y ~ x + I(x^2), data = quad_dat)
#Let's fit a quadratic model
quad_fit = lm(y ~ x + I(x^2), data = quad_data)
summary(quad_fit)
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
abline(quad_fit, col = "darkorange", lwd = 2, lty = 2)
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
abline(quad_fit, col = "darkorange", lwd = 2, lty = 2)
abline(quad_fit)
quad_fit
plot(fitted(quad_fit),resid(quad_fit),col = "darkgrey", pch = 1, cex = 1)
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
curve(quad_fit$coed[1] + quad_fit$coef[2] * x + quad_fit$coef[3] * x^2,from = 0, to = 5, col = "darkorange", lwd = 2, add = TRUE)
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
curve(quad_fit$coed[1] + quad_fit$coef[2] * x + quad_fit$coef[3] * x^2,from = -5, to = 30, col = "darkorange", lwd = 2, add = TRUE)
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
curve(quad_fit$coef[1] + quad_fit$coef[2] * x + quad_fit$coef[3] * x^2,from = -5, to = 30, col = "darkorange", lwd = 2, add = TRUE)
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
curve(quad_fit$coef[1] + quad_fit$coef[2] * x + quad_fit$coef[3] * x^2,from = 0, to = 5, col = "darkorange", lwd = 2, add = TRUE)
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
curve(quad_fit$coef[1] + quad_fit$coef[2] * x + quad_fit$coef[3] * x^2,from = -5, to = 30, col = "darkorange", lwd = 2, add = TRUE)
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
curve(quad_fit$coef[1] + quad_fit$coef[2] * x + quad_fit$coef[3] * x^2,from = -5, to = 30, col = "darkorange", lwd = 2, add = TRUE)
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
curve(quad_fit$coef[1] + quad_fit$coef[2] * x + quad_fit$coef[3] * x^2,from = 0, to = 5, col = "darkorange", lwd = 2, add = TRUE)
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
curve(quad_fit$coef[1] + quad_fit$coef[2] * x + quad_fit$coef[3] * x^2,from = -5, to = 30, col = "darkorange", lwd = 2, add = TRUE)
par(mfrow = c(1,2))
plot(fitted(quad_fit),resid(quad_fit),col = "darkgrey", pch = 1, cex = 1)
abline(h = 0, lwd = 2, col = "dodgerblue", lty = 2)
par(mfrow = c(1,2))
plot(fitted(quad_fit),resid(quad_fit),col = "darkgrey", pch = 1, cex = 1)
abline(h = 0, lwd = 2, col = "darkorange", lty = 2)
qqnorm(resid(quad_fit),col = "darkgrey", pch = 1, cex = 1)
qqline(resid(quad_fit),col = "dodgerblue",lwd = 2, lty = 2)
par(mfrow = c(1,2))
plot(fitted(quad_fit),resid(quad_fit),col = "darkgrey", pch = 1, cex = 1)
abline(h = 0, lwd = 2, col = "darkorange", lty = 2)
qqnorm(resid(quad_fit),col = "darkgrey", pch = 1, cex = 1)
qqline(resid(quad_fit),col = "dodgerblue",lwd = 2, lty = 2)
par(mfrow = c(1,2))
#Now, let's plot Q-Q plot (With Transformation - Log Transformation)
plot(fitted(initech_fit),resid(initech_fit),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted Values", ylab = "Residuals", main = "Fitted Values Vs Residuals of Initech")
abline(h = 0, col = "darkorange", lwd = 2, lty = 2)
#Now, let's plot Q-Q plot (Without Transformation)
plot(fitted(initech_fit_log),resid(initech_fit_log),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted Values", ylab = "Residuals", main = "Fitted Values Vs Residuals of Initech (Log Transformation of Response)")
abline ( h = 0, col = "darkorange", lwd = 2, lty = 2)
par(mfrow = c(1,2))
plot(fitted(initech_fit_log),resid(initech_fit_log),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted Values", ylab = "Residuals")
abline ( h = 0, col = "darkorange", lwd = 2, lty = 2)
qqnorm(resid(initech_fit_log), col = "darkgrey", pch = 1, cex = 1)
qqline(resid(initech_fit_log),lwd = 2, col = "darkorange",lty = 2)
initech = read.csv("initech.csv")
plot(salary~years,data=initech,col = "darkgrey",pch = 1,cex = 1,main = "Salaries at Initech, By Seniority")
#Plot the Scatter Plot and the fitted the line
plot(salary~years,data=initech,col = "darkgrey",pch = 1, cex = 1)
abline(initech_fit,col = "darkorange", lwd = 2)
par(mfrow=c(1,2))
plot(fitted(initech_fit),resid(initech_fit),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted Values", ylab = "Residuals", main = "Fitted Values Vs Residuals of Initech")
abline(h = 0, col = "darkorange", lwd = 2, lty = 2)
#Now, let's plot Q-Q plot
qqnorm(resid(initech_fit),col = "darkgrey",pch = 1, cex = 1)
qqline(resid(initech_fit),col = "dodgerblue",lwd = 2, lty = 2)
set.seed(1234)
data_for_perf = sim_for_perf()
sim_for_perf = function(){
x = seq(0,10)
y = 3 + x - 4 * x ^ 2 + rnorm(n = 11, mean = 0 , sd = 25)
data.frame(x,y)
}
set.seed(1234)
data_for_perf = sim_for_perf()
head(data_for_perf)
fit_correct = lm(y ~ x + I(x^2))
fit_correct = lm(y ~ x + I(x^2),data = data_for_perf)
fit_perfect = lm(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10),data = data_for_perf)
fit_perfect
fit_correct
plot(y~x,data = quad_perf_data )
plot(y~x,data = data_for_perf )
data_for_perf
x_plot = seq(-5,15, by = 0.1)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 1, cex = 1 )
plot(y~x,data = data_for_perf, pch = 1, cex = 1 )
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 1, cex = 1 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 1)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 1)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 1, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 1,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 20, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 1, cex = 2 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 2, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 2,lty = 2)
x_plot = seq(-5,15, by = 0.1)
plot(y~x,data = data_for_perf,ylim = c(-450,100), pch = 1, cex = 1 )
lines(x_plot,predict(fit_correct,newdata=data.frame(x = x_plot)),col = "dodgerblue", lwd = 1, lty = 1)
lines(x_plot,predict(fit_perfect,newdata=data.frame(x = x_plot)),col = "darkorange", lwd = 1, lty = 2)
autompg
model = lm (sr~., data = LifeCycleSavings)
model
hatvalues(,pde;)
hatvalues(model)
class(hatvalues(model))
hatvalues(model)
hatvalues(model)[1]
hatvalues(model)[(hatvalues(model) > (2 * mean(hatvalues(model))))]
model = lm (sr~., data = LifeCycleSavings)
indx(data)
index(data)
LifeCycleSavings
dim(LifeCycleSavings)
label(LifeCycleSavings)
labels(LifeCycleSavings)
model = lm (sr~., data = LifeCycleSavings)
cooks.distance(model) > (4 / length(cooks.distance(model)))
cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]
LifeCycleSavings["Australia"]
LifeCycleSavings[c("Australia")]
LifeCycleSavings[1]
LifeCycleSavings[1,]
LifeCycleSavings["Australia",]
LifeCycleSavings["Austria",]
LifeCycleSavings[c("Austria"),]
LifeCycleSavings[-c("Austria"),]
LifeCycleSavings[c(-"Austria"),]
LifeCycleSavings[c("Austria"),]
LifeCycleSavings[c(-1),]
LifeCycleSavings[c(-2),]
cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]
which.cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]
cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]
cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))].index()
cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))].index
cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]
rownames(cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))])
rownames(LifeCycleSavings)
LifeCycleSavings[c(-2),]
LifeCycleSavings[c("Australia"),]
LifeCycleSavings[-c("Australia"),]
LifeCycleSavings[-c(1),]
cooks.distance(model) > (4 / length(cooks.distance(model)))
cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]
subset(LifeCycleSavings,cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))])
rownames(LifeCycleSavings)
subset(LifeCycleSavings,rownames(LifeCycleSavings) == "Australia" )
subset(LifeCycleSavings,rownames(LifeCycleSavings) == c("Australia","Austria"))
subset(LifeCycleSavings,rownames(LifeCycleSavings) == (cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]))
subset(LifeCycleSavings,rownames(LifeCycleSavings) == (cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))])))
subset(LifeCycleSavings,rownames(LifeCycleSavings) == (cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]))
cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]
rownames(cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))])
data.frame(cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))])
rownames(data.frame(cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]))
subset(LifeCycleSavings, rownames(LifeCycleSavings) == (rownames(data.frame(cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]))))
subset(LifeCycleSavings, rownames(LifeCycleSavings) == c(rownames(data.frame(cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]))))
rownames(data.frame(cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))])
rownames(data.frame(cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]))
c(rownames(data.frame(cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))])))
p = c(rownames(data.frame(cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))])))
p
subset(LifeCycleSavings,rownames(LifeCycleSavings) == p)
LifeCycleSavings
LifeCycleSavings["cook"] = cooks.distance(model)
LifeCycleSavings
cooks.distance(model) > (4 / length(cooks.distance(model)))
subset(LifeCycleSavings,cook > (cooks.distance(model) > (4 / length(cooks.distance(model)))))
(cooks.distance(model) > (4 / length(cooks.distance(model))))
LifeCycleSavings[(cooks.distance(model) > (4 / length(cooks.distance(model))))]
LifeCycleSavings[cooks.distance(model) > (4 / length(cooks.distance(model)))]
cooks.distance(model) > (4 / length(cooks.distance(model)))
LifeCycleSavings[cooks.distance(model) > (4 / length(cooks.distance(model)))]
LifeCycleSavingscooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]\
LifeCycleSavingscooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]
LifeCycleSavingscooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]
cooks.distance(model)[cooks.distance(model) > (4 / length(cooks.distance(model)))]
LifeCycleSavings["Japan"]
LifeCycleSavings["Japan",]
subset(LifeCycleSavings,LifeCycleSavings$cook > (4 / length(cooks.distance(model)))]
subset(LifeCycleSavings,LifeCycleSavings$cook > (4 / length(cooks.distance(model))),]
LifeCycleSavings$cook > (4 / length(cooks.distance(model)))
subset(LifeCycleSavings,LifeCycleSavings$cook > (4 / length(cooks.distance(model))))
subset(LifeCycleSavings,LifeCycleSavings$cook < (4 / length(cooks.distance(model))))
model = lm (sr~., data = LifeCycleSavings)
LifeCycleSavings["cook"] = cooks.distance(model)
LifeCycleSavings_s = subset(LifeCycleSavings,LifeCycleSavings$cook < (4 / length(cooks.distance(model))))
model_new = lm (sr~., data = LifeCycleSavings_s)
summary(model_new)
summary(model_new)$coefficient[1]
summary(model_new)$coefficient[2]
summary(model_new)$coefficient[3]
summary(model_new)$coefficient[4]
summary(model_new)$coefficient[5]
summary(model_new)$coefficient[6]
summary(model_new)$coefficient[7]
summary(model_new)
summary(model_new)$coefficient
summary(model_new)$coefficient[1] + summary(model_new)$coefficient[2] + summary(model_new)$coefficient[3] + summary(model_new)$coefficient[4] + summary(model_new)$coefficient[5] + summary(model_new)$coefficient[6]
model = lm (sr~., data = LifeCycleSavings)
LifeCycleSavings["cook"] = cooks.distance(model)
LifeCycleSavings_s = subset(LifeCycleSavings,LifeCycleSavings$cook < (4 / length(cooks.distance(model))))
model_new = lm (sr~., data = LifeCycleSavings_s)
summary(model_new)
summary(model_new)$coefficient[1]+summary(model_new)$coefficient[2]+summary(model_new)$coefficient[3]+summary(model_new)$coefficient[4]+summary(model_new)$coefficient[5]+summary(model_new)$coefficient[6]
summary(model_new)$coefficient[1]
summary(model_new)$coefficient[2]
summary(model_new)
summary(model_new)$coefficient
summary(model_new)$coefficient[1,1]
summary(model_new)$coefficient[2,1]
summary(model_new)$coefficient[3,1]
summary(model_new)$coefficient[4,1]
summary(model_new)$coefficient[5,1]
summary(model_new)$coefficient[6,1]
summary(model_new)$coefficient[1,1]+summary(model_new)$coefficient[2,1]+summary(model_new)$coefficient[3,1]+summary(model_new)$coefficient[4,1]+summary(model_new)$coefficient[5,1]+summary(model_new)$coefficient[6,1]
model = lm (sr~., data = LifeCycleSavings)
LifeCycleSavings["cook"] = cooks.distance(model)
LifeCycleSavings_s = subset(LifeCycleSavings,LifeCycleSavings$cook < (4 / length(cooks.distance(model))))
model_new = lm (sr~., data = LifeCycleSavings_s)
LifeCycleSavings_s
dim(LifeCycleSavings_s)
summary(model_new)$coefficient[1,1]
summary(model_new)$coefficient
model = lm (sr~., data = LifeCycleSavings)
LifeCycleSavings["cook"] = cooks.distance(model)
LifeCycleSavings_s = subset(LifeCycleSavings,LifeCycleSavings$cook < (4 / length(cooks.distance(model))))
model_new = lm (sr~., data = LifeCycleSavings_s)
model_new
exit
