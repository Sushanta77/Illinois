}
#list_p_decision
}
diagnostics(fit_1, plotit = FALSE)
#Function created as part of the (a)
diagnostics = function(model = fit_1, pcol = "grey", lcol = "dodgerblue", alpha = 0.05, plotit = TRUE, testit = TRUE){
p_val = shapiro.test(resid(model))$'p.value'
decision = ifelse (p_val > alpha, "Fail to Reject","Reject")
list_p_decision = list(p_val=p_val,decision=decision) #Create the List
#if plotit = TRUE,
if (plotit){
par(mfrow=c(1,2))
#Fitted Versus Residual Plot
plot(fitted(model), resid(model), col = pcol, pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Versus Residual")
abline (h = 0, col = lcol, lwd = 1, lty = 1)
#Q-Q Plot
qqnorm(resid(model), col = pcol, pch = 1, cex = 1, main = "Q-Q Plot of the Model")
qqline(resid(model), col = lcol, lwd = 1, lty = 1)
}
#if testit = TRUE
if (testit){
list_p_decision
}
}
set.seed(420)
data_1 = data.frame(x = runif(n = 30, min = 0, max = 10),
y = rep(x = 0, times = 30))
data_1$y = with(data_1, 2 + 1 * x + rexp(n = 30))
fit_1 = lm(y ~ x, data = data_1)
data_2 = data.frame(x = runif(n = 20, min = 0, max = 10),
y = rep(x = 0, times = 20))
data_2$y = with(data_2, 5 + 2 * x + rnorm(n = 20))
fit_2 = lm(y ~ x, data = data_2)
data_3 = data.frame(x = runif(n = 40, min = 0, max = 10),
y = rep(x = 0, times = 40))
data_3$y = with(data_3, 2 + 1 * x + rnorm(n = 40, sd = x))
fit_3 = lm(y ~ x, data = data_3)
diagnostics(fit_1, plotit = FALSE)$p_val
diagnostics(fit_2, plotit = FALSE)$decision
diagnostics(fit_1, testit = FALSE, pcol = "black", lcol = "black")
diagnostics(fit_2, testit = FALSE, pcol = "grey", lcol = "green")
diagnostics(fit_3)
diagnostics(fit_1, plotit = FALSE)$p_val
diagnostics(fit_2, plotit = FALSE)$decision
diagnostics(fit_1, testit = FALSE, pcol = "black", lcol = "black")
diagnostics(fit_2, testit = FALSE, pcol = "grey", lcol = "green")
diagnostics(fit_3)
library(faraway)
install.packages("faraway")
library(faraway)
bptest
library(lmtest)
set.seed(1)
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
library(lmtest)
bptest()
set.seed(1)
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
set.seed(1)
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
options(scipen = 1, digits = 4, width = 80, fig.alin = "center")
#Function created as part of the (a)
diagnostics = function(model = fit_1, pcol = "grey", lcol = "dodgerblue", alpha = 0.05, plotit = TRUE, testit = TRUE){
p_val = shapiro.test(resid(model))$'p.value'
decision = ifelse (p_val > alpha, "Fail to Reject","Reject")
list_p_decision = list(p_val=p_val,decision=decision) #Create the List
#if plotit = TRUE,
if (plotit){
par(mfrow=c(1,2))
#Fitted Versus Residual Plot
plot(fitted(model), resid(model), col = pcol, pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Versus Residual")
abline (h = 0, col = lcol, lwd = 1, lty = 1)
#Q-Q Plot
qqnorm(resid(model), col = pcol, pch = 1, cex = 1, main = "Q-Q Plot of the Model")
qqline(resid(model), col = lcol, lwd = 1, lty = 1)
}
#if testit = TRUE
if (testit){
list_p_decision
}
}
set.seed(420)
data_1 = data.frame(x = runif(n = 30, min = 0, max = 10),
y = rep(x = 0, times = 30))
data_1$y = with(data_1, 2 + 1 * x + rexp(n = 30))
fit_1 = lm(y ~ x, data = data_1)
data_2 = data.frame(x = runif(n = 20, min = 0, max = 10),
y = rep(x = 0, times = 20))
data_2$y = with(data_2, 5 + 2 * x + rnorm(n = 20))
fit_2 = lm(y ~ x, data = data_2)
data_3 = data.frame(x = runif(n = 40, min = 0, max = 10),
y = rep(x = 0, times = 40))
data_3$y = with(data_3, 2 + 1 * x + rnorm(n = 40, sd = x))
fit_3 = lm(y ~ x, data = data_3)
library(faraway)
n = 50
set.seed(420)
x_1 = runif(n, 0, 5)
x_2 = runif(n, -2, 2)
set.seed(1)
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
bptest(fit_1)
library(lmtest)
library(faraway)
?farway
faraway
library(faraway)
?faraway::prostate
library(faraway)
prostate_data = faraway::prostate
prostate_add_model = lm(lpsa~.,data = prostate_data)
library(faraway)
prostate_data = faraway::prostate
prostate_add_model = lm(lpsa~.,data = prostate_data)
prostate_add_model
library(faraway)
prostate_data = faraway::prostate
library(faraway)
prostate_data = faraway::prostate
prostate_add_model = lm(lpsa~.,data = prostate_data)
summary(prostate_add_model)
names(summary(prostate_add_model))
summary(prostate_add_model)$'r.squared'
plot(fitted(prostate_add_model),resid(prostate_add_model),col = "darkgrey", pch = 1, cex = 1, main = "Fitted Vs Residual Plot")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(prostate_add_model),resid(prostate_add_model),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residual Plot")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(prostate_add_model),resid(prostate_add_model),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residual Plot for Additive Model")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
bptest(prostate_add_model)
plot(fitted(prostate_add_model),resid(prostate_add_model),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residual Plot for Additive Model")
abline(h = 0, col = "darkorange", lwd = 2, lty = 2)
bptest(prostate_add_model)
bptest(prostate_add_model)$'p-value'
summary(bptest(prostate_add_model))
names(bptest(prostate_add_model)))
names(bptest(prostate_add_model))
bptest(prostate_add_model)$'p.value'
bptest(prostate_add_model)$'p.value'[1]
bptest(prostate_add_model)$'p.value'[2]
bptest(prostate_add_model)
summary(bptest(prostate_add_model))
qqnorm(resid(prostate_add_model),col = "darkgrey", pch = 1, cex = 1, name = "Q-Q Plot for the Additive Prostate Model")
qqline(resid(prostate_add_model),col = "darkorange", lwd = 1, lty = 1)
qqnorm(resid(prostate_add_model),col = "darkgrey", pch = 1, cex = 1, main = "Q-Q Plot for the Additive Prostate Model")
qqline(resid(prostate_add_model),col = "darkorange", lwd = 1, lty = 1)
qqnorm(resid(prostate_add_model),col = "darkgrey", pch = 1, cex = 1, main = "Q-Q Plot for the Additive Prostate Model")
qqline(resid(prostate_add_model),col = "darkorange", lwd = 1, lty = 2)
plot(fitted(prostate_add_model),resid(prostate_add_model),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residual Plot for Additive Model")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(prostate_add_model),resid(prostate_add_model),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residual Plot for Additive Model")
abline(h = 0, col = "darkorange", lwd = 1, lty = 1)
qqnorm(resid(prostate_add_model),col = "darkgrey", pch = 1, cex = 1, main = "Q-Q Plot for the Additive Prostate Model")
qqline(resid(prostate_add_model),col = "darkorange", lwd = 1, lty = 1)
prostate_add_model
shapiro.test(prostate_add_model)
shapiro.test(resid(prostate_add_model))
library(ggplot2)
?ggplot2::diamonds
dim(ggplot2::diamonds)
diamonds_data = ggplot2::diamonds
dim(diamonds_data)
diamonds_data = ggplot2::diamonds
diamonds_slr = lm(price~carat,data = diamonds_data)
summary(diamonds_slr)
plot(price~caret,data = diamonds_data,col = "darkgrey", pch = 1, cex = 1)
plot(price~carat,data = diamonds_data,col = "darkgrey", pch = 1, cex = 1)
plot(price~carat,data = diamonds_data,col = "darkgrey", pch = 1, cex = 1,main = "Carat Vs Price of the Diamonds")
plot(price~carat,data = diamonds_data,col = "darkgrey", pch = 1, cex = 1,main = "Carat Vs Price of the Diamonds")
plot(price~carat,data = diamonds_data,col = "darkgrey", pch = 1, cex = 1,main = "Carat Vs Price of the Diamonds")
plot(price~carat,data = diamonds_data,col = "darkgrey", pch = 1, cex = 1,main = "Carat Vs Price of the Diamonds")
plot(price~carat,data = diamonds_data,col = "darkgrey", pch = 1, cex = 1,main = "Carat Vs Price of the Diamonds")
plot(price~carat,data = diamonds_data,col = "darkgrey", pch = 1, cex = 1,main = "Carat Vs Price of the Diamonds")
diamonds_slr_log = lm(log(price)~carat, data = diamonds_data)
plot(log(price)~carat, data = diamonds_data, col = "darkgrey", pch = 1, cex = 1)
abline(diamonds_slr_log)
plot(log(price)~carat, data = diamonds_data, col = "darkgrey", pch = 1, cex = 1)
curve(predict(diamonds_slr_log))
initech = read.csv("initech.csv")
plot(y~x,data=quad_data,col = "darkgrey", pch = 1, cex = 1, main = "Plot ")
diamonds_slr_log = lm(log(price)~carat, data = diamonds_data)
diamonds_slr_log
plot(log(price)~carat, data = diamonds_data, col = "darkgrey", pch = 1, cex = 1)
curve(predict(diamonds_slr_log),from = 0, to = 5, col = "darkorange", lwd = 1, lty =1, add = TRUE)
diamonds_slr_log$coef[1]
diamonds_slr_log$coef[2]
diamonds_slr_log$coef[1] + diamonds_slr_log$coef[2] * diamonds_data$carat
diamonds_slr_log$coef[1] + diamonds_slr_log$coef[2] * diamonds_data$carat
curve(diamonds_slr_log$coef[1] + diamonds_slr_log$coef[2] * diamonds_data$carat,from = 0, to = 5, col = "darkorange", lwd = 1, lty =1, add = TRUE)
curve(diamonds_slr_log$coef[1] + diamonds_slr_log$coef[2] * x,from = 0, to = 5, col = "darkorange", lwd = 1, lty =1, add = TRUE)
plot(log(price)~carat, data = diamonds_data, col = "darkgrey", pch = 1, cex = 1)
curve(diamonds_slr_log$coef[1] + diamonds_slr_log$coef[2] * x,from = 0, to = 5, col = "darkorange", lwd = 1, lty =1, add = TRUE)
diamonds_slr_log = lm(log(price)~carat, data = diamonds_data)
plot(log(price)~carat, data = diamonds_data, col = "darkgrey", pch = 1, cex = 1)
abline(predict(diamonds_slr_log),lwd = 2, col = "darkorange", lty = 1)
plot(log(price)~carat, data = diamonds_data, col = "darkgrey", pch = 1, cex = 1)
abline(predict(diamonds_slr_log))
diamonds_slr_log = lm(log(price)~carat, data = diamonds_data)
plot(log(price)~carat, data = diamonds_data, col = "darkgrey", pch = 1, cex = 1)
abline(diamonds_slr_log,lwd = 2, col = "darkorange", lty = 1)
diamonds_slr_log = lm(log(price)~carat, data = diamonds_data)
plot(log(price)~carat, data = diamonds_data, col = "darkgrey", pch = 1, cex = 1)
abline(diamonds_slr_log,lwd = 2, col = "darkorange", lty = 1)
plot(fitted(diamonds_slr_log),resid(diamonds_slr_log),col = "darkgrey", pch = 1, cex = 1, main = "Fitted Versus Residual Plot of Diamond model for Log(Price)")
plot(h = 0, col = "darkorange", lwd = 2, lty = 1)
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(diamonds_slr_log),resid(diamonds_slr_log),col = "darkgrey", pch = 1, cex = 1, main = "Fitted Versus Residual Plot of Diamond model for Log(Price)")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
bptest(diamonds_slr_log)
qqnorm(resid(diamonds_slr_log),col = "darkgrey", pch = 1, cex = 1, main = "Q-Q Plot of the Diamond Model for the Log(Price)")
qqline(resid(diamonds_slr_log),col = "darkgrey", lwd = 1, lty =
qqnorm(resid(diamonds_slr_log),col = "darkgrey", pch = 1, cex = 1, main = "Q-Q Plot of the Diamond Model for the Log(Price)")
qqline(resid(diamonds_slr_log),col = "darkgrey", lwd = 1, lty = 1)
qqnorm(resid(diamonds_slr_log),col = "darkgrey", pch = 1, cex = 1, main = "Q-Q Plot of the Diamond Model for the Log(Price)")
qqline(resid(diamonds_slr_log),col = "darkorange", lwd = 2, lty = 1)
par(mfrow = c(1,2))
#Plot the Fitted Versus Residual Plot
plot(fitted(diamonds_slr_log),resid(diamonds_slr_log),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Versus Residual Plot of Diamond model for Log(Price)")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Q-Q Plot
qqnorm(resid(diamonds_slr_log),col = "darkgrey", pch = 1, cex = 1, main = "Q-Q Plot of the Diamond Model for the Log(Price)")
qqline(resid(diamonds_slr_log),col = "darkorange", lwd = 2, lty = 1)
par(mfrow = c(1,2))
#Plot the Fitted Versus Residual Plot
plot(fitted(diamonds_slr_log),resid(diamonds_slr_log),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Versus Residual Plot of Diamond model for Log(Price)")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Q-Q Plot
qqnorm(resid(diamonds_slr_log),col = "darkgrey", pch = 1, cex = 1, main = "Q-Q Plot of the Diamond Model for the Log(Price)")
qqline(resid(diamonds_slr_log),col = "darkorange", lwd = 2, lty = 1)
diamonds_slr_predict_log = lm(log(price)~log(carat), data = diamonds_data)
plot(log(price)~log(carat), data = diamonds_data, col = "darkgrey", pch = 1, cex = 1)
abline(diamonds_slr_predict_log,lwd = 2, col = "darkorange", lty = 1)
par(mfrow = c(1,2))
#Plot the Fitted Versus Residual Plot
plot(fitted(diamonds_slr_predict_log),resid(diamonds_slr_predict_log),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Versus Residual Plot of Diamond model for Log(Price) and Log(carat)")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Q-Q Plot
qqnorm(resid(diamonds_slr_predict_log),col = "darkgrey", pch = 1, cex = 1, main = "Q-Q Plot of the Diamond Model for the Log(Price) and Log(carat)")
qqline(resid(diamonds_slr_predict_log),col = "darkorange", lwd = 2, lty = 1)
par(mfrow = c(1,2))
#Plot the Fitted Versus Residual Plot
plot(fitted(diamonds_slr_predict_log),resid(diamonds_slr_predict_log),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Versus Residual Plot of Diamond model for Log(Price) and Log(carat)")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Q-Q Plot
qqnorm(resid(diamonds_slr_predict_log),col = "darkgrey", pch = 1, cex = 1, main = "Q-Q Plot of the Diamond Model for the Log(Price) and Log(carat)")
qqline(resid(diamonds_slr_predict_log),col = "darkorange", lwd = 2, lty = 1)
diamonds_slr_predict_log
predict(diamonds_slr_predict_log,newdata = data.frame(log(carat) = log(3)) , interval = "prediction", level = 0.99)
data.frame(log(carat) = log(3)
data.frame(carat = 3)
data.frame(log(carat) = 3)
data.frame("log(carat)" = 3)
predict(diamonds_slr_predict_log,newdata = data.frame("log(carat)" = log(3)) , interval = "prediction", level = 0.99)
predict(diamonds_slr_predict_log,newdata = data.frame("carat" = log(3)) , interval = "prediction", level = 0.99)
predict(diamonds_slr_predict_log,newdata = data.frame("carat1" = log(3)) , interval = "prediction", level = 0.99)
predict(diamonds_slr_predict_log,newdata = data.frame(carat = log(3)) , interval = "prediction", level = 0.99)
exp(predict(diamonds_slr_predict_log,newdata = data.frame(carat = log(3)) , interval = "prediction", level = 0.99))
diamonds_slr_predict_log
8.45 + 1.68 * log(3)
predict(diamonds_slr_predict_log,newdata = data.frame(carat = log(3)) , interval = "prediction", level = 0.99)
predict(diamonds_slr_predict_log,newdata = data.frame(carat = log(3)))
predict(diamonds_slr_predict_log,newdata = data.frame(carat = 3))
8.45 + 1.68 * 3
library(faraway)
?faraway::corrosion
plot(fitted(corrosion_slr_fit),col = "darkgrey", pch = 1, cex = 1, main = "Fitted Vs Residuals")
corrosion_data = faraway::corrosion
corrosion_slr_fit = lm(loss ~ Fe, data = corrosion_data)
corrosion_slr_fit
plot(fitted(corrosion_slr_fit),col = "darkgrey", pch = 1, cex = 1, main = "Fitted Vs Residuals")
dim(corrosion_data)
plot(fitted(corrosion_slr_fit),col = "darkgrey", pch = 20, cex = 1, main = "Fitted Vs Residuals")
plot(fitted(corrosion_slr_fit),col = "darkgrey", pch = 20, cex = 2, main = "Fitted Vs Residuals")
plot(h = 0, col = "darkorange", lwd = 2, lty = 1)
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Fitted Vs Residuals of Corrosion Data
plot(fitted(corrosion_slr_fit),col = "darkgrey", pch = 20, cex = 2, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Fitted Vs Residuals of Corrosion Data
plot(fitted(corrosion_slr_fit),col = "darkgrey", pch = 20, cex = 2, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Fitted Vs Residuals of Corrosion Data
plot(fitted(corrosion_slr_fit),col = "darkgrey", xlim = c(-10, 130), pch = 20, cex = 2, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Fitted Vs Residuals of Corrosion Data
plot(fitted(corrosion_slr_fit),col = "darkgrey", ylim = c(-10, 130), pch = 20, cex = 2, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Fitted Vs Residuals of Corrosion Data
plot(fitted(corrosion_slr_fit),col = "darkgrey", ylim = c(-30, 130), pch = 20, cex = 2, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Fitted Vs Residuals of Corrosion Data
plot(fitted(corrosion_slr_fit),col = "darkgrey", ylim = c(-5, 130), pch = 20, cex = 2, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Fitted Vs Residuals of Corrosion Data
plot(fitted(corrosion_slr_fit),col = "darkgrey", ylim = c(-5, 140), pch = 20, cex = 2, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Q-Q Plot
qqnorm(resid(corrosion_slr_fit),col = "darkgrey", pch = 20, cex = 2, main = "Q-Q Plot")
qqline(resid(corrosion_slr_fit), col = "darkorange", lwd = 2, lty = 1)
corrosion_slr_fit
bptest(corrosion_slr_fit)
shapiro.test(resid(corrosion_slr_fit))
#Plot the Fitted Vs Residuals of Corrosion Data
plot(fitted(corrosion_slr_fit),resid(corrosion_slr_fit),col = "darkgrey", ylim = c(-5, 140), pch = 20, cex = 2, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Fitted Vs Residuals of Corrosion Data
plot(fitted(corrosion_slr_fit),resid(corrosion_slr_fit),col = "darkgrey", pch = 20, cex = 2, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Fitted Vs Residuals of Corrosion Data
plot(fitted(corrosion_slr_fit),resid(corrosion_slr_fit),col = "darkgrey", pch = 1, cex = 1 xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals")
#Plot the Fitted Vs Residuals of Corrosion Data
plot(fitted(corrosion_slr_fit),resid(corrosion_slr_fit),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
#Plot the Q-Q Plot
qqnorm(resid(corrosion_slr_fit),col = "darkgrey", pch = 1, cex = 1, main = "Q-Q Plot")
qqline(resid(corrosion_slr_fit), col = "darkorange", lwd = 2, lty = 1)
corrosion_model_2 = lm(loss ~ poly(Fe,2))
corrosion_model_2 = lm(loss ~ poly(Fe,2), data = corrosion_data)
corrosion_model_2 = lm(loss ~ poly(Fe,2), data = corrosion_data)
corrosion_model_4 = lm(loss ~ poly(Fe,4), data = corrosion_data)
corrosion_model_6 = lm(loss ~ poly(Fe,6), data = corrosion_data)
corrosion_model_2
corrosion_model_4
corrosion_model_6
lm(loss ~ Fe + I(Fe^2), data = corrosion_data)
corrosion_model_2
predict(corrosion_model_2)
predict(lm(formula = loss ~ Fe + I(Fe^2), data = corrosion_data))
par(mfrow = c(1,3))
plot(fitted(corrosion_model_2),resid(corrosion_model_2),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 2")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(corrosion_model_4),resid(corrosion_model_4),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 4")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(corrosion_model_6),resid(corrosion_model_6),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 6")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
par(mfrow = c(1,3))
plot(fitted(corrosion_model_2),resid(corrosion_model_2),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 2")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(corrosion_model_4),resid(corrosion_model_4),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 4")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(corrosion_model_6),resid(corrosion_model_6),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 6")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
par(mfrow = c(1,3))
plot(fitted(corrosion_model_2),resid(corrosion_model_2),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 2")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(corrosion_model_4),resid(corrosion_model_4),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 4")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(corrosion_model_6),resid(corrosion_model_6),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 6")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
par(mfrow = c(1,3))
plot(fitted(corrosion_model_2),resid(corrosion_model_2),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 2")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(corrosion_model_4),resid(corrosion_model_4),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 4")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(corrosion_model_6),resid(corrosion_model_6),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 6")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(corrosion_model_2),resid(corrosion_model_2),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 2")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(corrosion_model_4),resid(corrosion_model_4),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 4")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
plot(fitted(corrosion_model_6),resid(corrosion_model_6),col = "darkgrey", pch = 1, cex = 1, xlab = "Fitted", ylab = "Residuals", main = "Fitted Vs Residuals - Poly 6")
abline(h = 0, col = "darkorange", lwd = 2, lty = 1)
bptest(corrosion_model_2)
bptest(corrosion_model_4)
bptest(corrosion_model_6)
anova(corrosion_model_2,corrosion_model_4)
anova(corrosion_model_2,corrosion_model_4, corrosion_model_6)
anova(corrosion_model_4,corrosion_model_6)
for(i in 1:20){
print (i)
}
library(lmtest)
set.seed(1)
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
bptest(fit_1)
set.seed(1)
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
bptest(fit_2)
x_1
x_2
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
y_1
fit_1 = lm(y_1 ~ x_1 + x_2)
fit_1
summary(fit_1)
fit_1_null = lm(y_1 ~ x_1)
anova(fit_1_null,fit_1)
summary(fit_1)
summary(fit_1)
summary(fit_1)$coefficient
summary(fit_1)$coefficient[3,4]
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
fit_2
summary(fit_2)
summary(fit_2)$coefficient[3,4]
num_sims = 2500
p_val_1 = rep(0, num_sims)
p_val_2 = rep(0, num_sims)
birthday = 19770411
set.seed(birthday)
for(i in 1:20){
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
p_val_1[i] = summary(fit_1)$coefficient[3,4]
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
p_val_2[i] = summary(fit_2)$coefficient[3,4]
}
p_val_1
num_sims = 2500
p_val_1 = rep(0, num_sims)
p_val_2 = rep(0, num_sims)
birthday = 19770411
set.seed(birthday)
for(i in 1:2500){
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
p_val_1[i] = summary(fit_1)$coefficient[3,4]
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
p_val_2[i] = summary(fit_2)$coefficient[3,4]
}
p_val_1
p_val_2
mean(p_val_1 < 0.01)
mean(p_val_1 < 0.05)
mean(p_val_2 < 0.01)
mean(p_val_2 < 0.05)
mean(p_val_2 < 0.1)
library(knitr)
Proportion_report = data.frame(
p_value = c("p_value_1","p_value_1","p_value_1","p_value_2","p_value_2","p_value_2"),
alpha_value = c("0.01","0.05","0.1","0.01","0.05","0.1"),
Proportion = c(mean(p_val_1<0.01),mean(p_val_1<0.05),mean(p_val_1<0.10),mean(p_val_2<0.01),mean(p_val_2<0.05),mean(p_val_2<0.1))
)
kable(Proportion_report, format = "pandoc",padding = 2,caption = "Summary of Proportion Results")
0.0096*100
0.0492*100
0.1040*100
0.0980*100
0.1672*100
mtcars
model = lm(mpg~hp + am, data=mtcars)
cooks.distance(model) > 4/length(cooks.distance(model = ))
4/length(cooks.distance(model))
cooks.distance(model) > 4/length(cooks.distance(model))
large_cd_mpg = cooks.distance(model) > 4/length(cooks.distance(model))
large_cd_mpg
large_cd_mpg = cooks.distance(model)
cd_mpg_hp_add = cooks.distance(model)
large_cd_mpg = cooks.distance(model) > 4/length(cooks.distance(model))
cd_mpg_hp_add[large_cd_mpg]
model_fix = lm(mpg~hp + am, data = mtcars, subset = cd_mpg_hp_add <= 4/length(cd_mpg_hp_add))
model_fix
model
plot(model)
par(mfrow=c(2,2))
plot(model)
model = lm (sr~., data = LifeCycleSavings)
large_cooks_distance = cd_model > 4/length(cd_model)
cd_model = cooks.distance(model)
large_cooks_distance = cd_model > 4/length(cd_model)
cd_model
large_cooks_distance
cd_model[large_cooks_distance]
model_fix = lm (sr~., data = LifeCycleSavings, subset = cd_model <= 4/length(cd_model))
model
model_fix
LifeCycleSavings["cook"] = cooks.distance(model)
LifeCycleSavings_s = subset(LifeCycleSavings,LifeCycleSavings$cook < (4 / length(cooks.distance(model))))
model_new = lm (sr~., data = LifeCycleSavings_s)
model_new
model_fix
model_fix = lm (sr~., data = LifeCycleSavings, subset = cd_model < 4/length(cd_model))
model_new
model_fix
LifeCycleSavings_s = subset(LifeCycleSavings,LifeCycleSavings$cook <= (4 / length(cooks.distance(model))))
model_fix = lm (sr~., data = LifeCycleSavings, subset = cd_model <= 4/length(cd_model))
model_new
model_fix
LifeCycleSavings_s = subset(LifeCycleSavings,LifeCycleSavings$cook < (4 / length(cooks.distance(model))))
model_new = lm (sr~., data = LifeCycleSavings_s)
model_new
model_fix
model_fix = lm (sr~., data = LifeCycleSavings, subset = cd_model <= 4/length(cd_model))
model_new
model_fix
LifeCycleSavings["cook"] = cooks.distance(model)
LifeCycleSavings_s = subset(LifeCycleSavings,LifeCycleSavings$cook < (4 / length(cooks.distance(model))))
model_new = lm (sr~., data = LifeCycleSavings_s)
model_new
model_fix = lm (sr~., data = LifeCycleSavings, subset = cd_model <= 4/length(cd_model))
model_fix
cd_model = cooks.distance(model)
large_cooks_distance = cd_model > 4/length(cd_model)
cd_model[large_cooks_distance]
model_fix = lm (sr~., data = LifeCycleSavings, subset = cd_model <= 4/length(cd_model))
model_fix
model = lm (sr~., data = LifeCycleSavings)
LifeCycleSavings["cook"] = cooks.distance(model)
LifeCycleSavings_s = subset(LifeCycleSavings,LifeCycleSavings$cook < (4 / length(cooks.distance(model))))
model_new = lm (sr~., data = LifeCycleSavings_s)
model_new
model_fix
LifeCycleSavings
?LifeCycleSavings
